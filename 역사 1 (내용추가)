<연표용>

1960년대
1.	하드웨어 판매중심
2.	소프트웨어 공유 문화, 소프트웨어 공유 문화
3.	[1969년] 벨 연구소에서 근무하고 있던 켄 톰슨(Ken Thompson)에 의해 Unix 개발
-	AT & T를 비롯한 여러 회사, 버클리 등 비영리 단체에서 다양한 버전 개발 (유닉스의 소스코드는 주로 연구기관을 중심으로 배포됨.)

1970년대
1.	[1976년] 빌게이츠가 컴퓨터 애호가들에게 보내는 공개 편지 “Open Letter to Hobbyists”
2.	상업용 소프트웨어 시대의 시작
3.	상용 소프트웨어의 등장 = 모든 코드를 비공개 형태로 만들어 버리게 되는 계기

1980년대 (자유소프트웨어 운동과 GNU 프로젝트가 시작)
1.	HP/UX, AIX, Solaris 등의 상용버전 Unix 개발 및 상용화
-	유닉스 초기에 존재하던 활발한 소스코드 공개 문화는 사라져 버리게 되어 점차 폐쇄적으로 바뀌어 호환성을 갖지 못하는 상태까지 이르렀음.
-	유닉스의 상업화 경향이 강화되면서 이에 대한 반발의 움직임으로 자유소프트웨어 운동이 추진됨. 자유소프트웨어(Free Software)가 개발되기 시작한것이다.
2.	리처드 스톨만 = 자유 소프트웨어 운동 주도 / 상용 소프트웨어에 대항한 자유로운 대안을 만들기 위한 의지.
3.	[1984년] 리처드 스톨만 = GNU (GNU is Not a Unix) 프로젝트 시작
-	Text editor(Emacs), Comiler(gcc), Debugger(gdb), make 개발
4.	[1985년] 리처드 스톨만 = 자유소프트웨어재단(FSF - Free Software Foundation) 설립.
5.	[1989년] 리처드 스톨만 = 최초의 오픈소스 라이센스 GNU ( General Public License ) 배포

1980년대 이후
-	커널 개발은 GNU 프로젝트의 개발 과정 중 마지막 부분에 속하는 것이고 개발을 시작한지 얼마 되지 않은 때 리누스 토발즈가 나타났음.
-	그는 하나의 ‘커널’을 개발했고 이것은 기존의 것보다 훨씬 빨랐음. 또한 훌륭하고 안정적으로 작동을 함. 그것이 리눅스라고 불리는 커널임.
-	1991년부터 1993년까지는 사실상 리눅스의 유년기.


<본문용>
1960년대는 IBM360으로 대표되는 메인프레임이 지배하던 시대였 다. 이 당시에는 소프트웨어와 하드웨어가 밀접하게 결합(bundling) 되어 있었기 때문에 어떤 특정 기종을 위해 만들어진 소프트웨어는 다른 기종에서 작동하지 않았다. 이때 IBM은 소프트웨어 소스코드 를 하드웨어와 함께 제공했고 운영체제 소프트웨어의 소스코드를 페쇄하지 않았다. 그러나 IBM이 반독점법 패소에 대한 대응방안의 하나로 소프트웨어를 하드웨어와 분리(unbundling)하면서 소프트웨 어 자체가 중요한 산업이 되고 기업들간의 경쟁이 심화되면서 소프 트웨어의 소스크드는 기업의 비밀이 되고 모든 기업들에게 소스코 드는 경쟁우위를 보장해주는 기술자원으로 변하였다. 
이러한 흐름의 다른 한쪽에서는 소스코드를 공개하는 새로운 흐 름이 형성되고 있었다. 1969년 AT&T의 벨연구소에서 근무하고 있 던 켄 톰슨(Ken Thompson)이 개인적인 연구를 수행하기 위해 Unix라는 운영체제를 만들었다. 이 운영체제는 C라는 새로운 고급 언어로 작성되었는데 이는 하드웨어에 종속되지 않는 특징을 지니 고 있었다. 이로 인해 벨 연구소가 아닌 곳에서도 유닉스를 사용할 수 있게 되었다. 이렇게 개발된 유닉스의 소스코드는 주로 연구기 관을 중심으로 배포되었다. 
1980년대 들어 유닉스는 전세계의 대학이나 연구기관으로 퍼져나 갔으며 이러한 경향을 보고 기업들은 유닉스가 시장성이 있음을 인 지하고 유닉스 기종을 만들기 시작했다. 이로 인해 유닉스는 상업 화의 길을 걷기 시작했다. 1984년 독점금지법과 관련해서 AT&T 분할이 이루어지면서 AT&T가 컴퓨터업계에 진출할 수 있게 되었 다. 이 과정을 통해 AT&T는 과거 거의 무료로 소스코드를 공개하 던 방식에서 유닉스의 상품화로 입장을 바꾸어 가격도 오르고 소스 코드 역시 엄격하게 관리되어 더 이상 개방되지 않게 되었다. 
이렇게 유닉스 분야에 상업화 바람이 불면서 유닉스 초기에 존재 하던 활발한 소스코드 공개 문화는 사라져 버리게 되어 결국 제각 각이 되어버린 유닉스들은 점차 페쇄적으로 바뀌어 호환성을 갖지 못하데 되는 상태까지 이르렀다. 
유닉스의 상업화 경향이 강화되면서 이에 대한 반발의 움직으로 자유소프트웨어 운동이 추진되기 시작했다. 폐쇄적으로 진행되어 가는 상업용 유닉스의 흐름과는 별개로 자유소프트웨어(Free Software)가 개발되기 시작한 것이다. 
1983년 경에 시작된 GNU2) 프로젝트는 리차드 스톨만(Richard Stallman)이 주도하였다. 이 프로젝트의 목표는 기술적으로 완벽한 유닉스 호환 소프트웨어 체계를 개발하는 것이었다. 그러나 GNU는 기술적으로 유닉스와 같지만 사용자들에 자유를 준다는 점에서 유 닉스와는 본질적으로 달랐다. 
결국 사회적 측면에서 볼 때 GNU프로젝트는 기술적으로는 동등하지만 사회적으로는 완전히 다른 소프트웨어를 개발하는 것이었 다. 스톨만이 추구한 것은 ‘사적독점 소프트웨어 사회체계’에 맞서 소프트웨어를 공유하고 협력하는 공동체를 만들고 궁극적으로는 사 적독점 소프트웨어를 완전히 극복하는 것이었다. 스톨만은 이 프로 젝트를 수행하기 위해 1985년 자유소프트웨어재단(Free Software Foundation)을 설립하였다. 
여기서 자유는 다음 네 가지의 의미를 지닌다. 첫째, 어떤 목적으 로도 프로그램을 가동시킬 수 있는 자유 둘째, 필요에 맞게 소프트 웨어를 수정할 자유 셋째, 무료 또는 유로로 복사본을 재배포할 수 있는 자유 넷째, 전체 공동체가 혜택을 볼 수 있도록 프로그램의 수정본을 배포할 수 있는 자유이다. 
한편 이와 같은 공공의 영역에 위치하고 있는 자유 소프트웨어의 약점은 누군가 그것을 사유 소프트웨어로 사용할 가능성이 있다는 점이다. 이 문제를 해결하기 위해 스톨만은 저작권에는 반대하지만 그것을 이용하여 저작권에 대응하는 GPL(General Public Licence) 를 개발하였다. GPL은 해당 프로그램을 마음대로 복사, 배포, 수정 할 수 있으나, 그 수정된 프로그램의 소스는 반드시 공개되어야 한 다는 라이센스이다.(부록, [자료 1] 참조) 
GNU 프로젝트는 여러 가지 기술을 개발했으나 1990년대 초까지 운영체제의 핵심기능을 담당하는 커널은 개발하지 못하고 있었다. 이것은 GNU가 독립된 운영체제로 완성되기 위해서는 반드시 필요 한 것이다. 이 문제는 리눅스(Linux)라는 프로그램이 개발되어 GNU 프로젝트에 합류함으로써 해결되었다. 리누스 토발즈(Linus Benedict Tovalds)가 유닉스를 개조하던 끝에 새로운 커널을 개발한 것이었다. 1992년에 이 새루운 커널이 불완전했던 GNU 체계에 결합됨으로써 자유운영체제인 GNU/Linus가 완성되었다. 
리눅스가 발전하면서 자유소프트웨어 운동도 발전하였는데, 이 과정에서 자유소프트웨어 운동 내부에서도 분화가 이루어지기 시작 했다. 이상주의적이고 도덕적인 스톨만의 입장에 대해서 실용주의 적 관점에서의 비판이 이루어지기 시작한 것이다. 
자유소프트웨어 운동을 주도해왔던 스톨만은 공유와 협동의 문화 에 입각해서 소프트웨어를 개발해야하며 사적 이익과 독점을 추구 하는 산업체 주도의 문화에 반대해야 한다고 역설했다. 도덕적인 측면에서 자유소프트웨어의 개발을 주장했던 것이다. 그러나 자유 소프트웨어의 정신은 존중하지만 스톨만의 도덕적이고 이상주의적 운동방식에 대해 비판적인 입장을 취하는 집단들이 형성되기 시작 했다. 
++++
새로운 접근의 논리적 근거는 에릭 레이몬드(Eric Raymond)의 ‘성당과 시장(Cathedral and Bazaar)’이라는 논문이 발표되면서 이 루어졌다.3) 이 글은 리눅스를 개발하는 방식이 왜 성공적인 결과를 낳았는지를 분석하고 그 분석결과를 자신이 참여한 오픈소스 프로 젝트를 통해 검증한 글이다. 리눅스 및 오픈소스 소프트웨어 기술 개발에 대해 인류학적 접근을 시도한 글이라고 할 수 있다. 
레이몬드는 GNU프로젝트에서 리눅스가 수행한 기능과 역할보다 도 리눅스가 개발되고 개선되는 방식에 주목했다. 리눅스의 개발방식은 스톨만이 주도한 GNU프로젝트의 개발방식과는 매우 다른 것 이었다. 레이몬드에 따르면 스톨만이 주장하는 방식은 탁월한 능력 을 가진 전문가들이 복잡한 프로그램을 개발하기 위해 위대한 고립 속에서 주의 깊게 작업하는 것과 유사했다. 이것은 중세의 ‘성당 (Cathedral)’을 건축하는 것과 유사한 접근 방식이었다. 그러나 리눅 스 개발되는 과정은 마치 ‘시장(Bazaar)’에서 여러 사람들이 모여 어지럽게 뒤섞여 제품을 개발하는 방식을 취했다고 주장하며 바로 이러한 방식이 리눅스의 성공을 가져온 것이라고 주장했다. 
tester)와 공동개발자가 있으면 거의 모든 문제들은 빨리 파악될 것이고 그 중에는 쉽게 고치는 사 람이 있게 마련이다”라는 사실을 지적하면서 불완전한 소프트웨어 를 자주 빠르게 발표하여 수많은 사람들이 버그를 수정하는 방식에 주목하였다. 그는 리누즈 토발즈가 리눅스를 만들었다는 사실보다 
‘리눅스의 개발 모델’을 만든 것에 더 큰 의미를 부여하였다. 
레이몬드의 발표는 프로그래머와 업계에 커다란 반향을 일으켰 다. 특히 1998년 1월 넷스케이프사가 레이몬드의 논리를 수용하여 ‘넷스케이프 커뮤티케이터’의 소스코드를 공개한다고 발표하였다. 넷스케이프사의 이 결정은 ‘스톨만이 주장하는 자유소프트웨어 운 동’과는 입장을 달리하는 운동을 형성하는 직접적인 계기가 되었다. 레이몬드와 그의 입장에 동의하는 사람들은 오픈소스운동을 관리하 기 위해 Open Source Initiative라는 조직을 결성하였다. 자유소프 트웨어의 이념적 측면보다는 그것이 개발되는 방식에 초점을 맞추 는 실용적 접근을 취하는 이들은 산업체와의 관계에서도 스톨만과 는 다른 입장을 취한다. 이들은 자유소프트웨어는 산업계는 물론이 고 개발자에도 경제적인 보상을 제공할 수 있어야 한다고 주장하고 있다. 스톨만은 산업계와의 협력을 거부하면서 폐쇄적인 전략을 취 하고 있으며 소프트웨어의 개발자에게도 도덕적인 대의에 협력할 것을 요구한다고 파악한다. 이데올로기적 관점이 아니라 굳건한 실 용적 기반 위에 자유소프트웨어가 설 수 있어야 한다는 것이 이들 의 주장이다. 
두 운동의 흐름을 종합해 보면 다음 <표 1>과 같이 정리할 수 있으며, 결국 자유소프트웨어는 원칙에 입각한 소스코드의 자유로 운 사용이라는 측면을 오픈소스 소프트웨어는 사회적 실용성에 중 심을 두고 소스코드의 공개라는 측면을 강조한다고 할 수 있다. 

<본문정리용>
1.	1980년대
[리차드스톨만]
(간략)
리차드 스톨만은 자유소프트웨어 운동의 창시자이다. 그는 GNU 운영체제를 만들려는 과정에서 자유소프트웨어 운동의 법률적, 철학적, 기술적 토대를 구축했다. 그의 공헌이 없었다면 리눅스나 오픈소스는 아마도 오늘날과 같은 형태로 진화하지 못했을 것이다. 

(자세히)
MIT의 연구원이었던 리차드 스톨만(Richard Stallman)이 최초의 "자유 소프트웨어(free software)" 개발 프로젝트인 GNU(Gnu's Not Unix: '구-뉴'라고 읽음)를 시작함. 스톨만은 자유 소프트웨어 파운데이션(Free Software Foundation)을 설립하고 본격적인 자유 소프트웨어 운동을 시작함. 당시 GNU는 유닉스의 라이센스 권한을 AT&T가 소유하고 있다는 점에 반발해 만들어진 시스템 소프트웨어이지만, 기술적으로는 유닉스와 매우 유사함.
 
스톨만과 그에 동조하는 프로그래머들은 GNU 프로젝트 하에서 유닉스와 호환되는 시스템 소프트웨어를 만들기 시작했고, 개발된 GNU 소프트웨어는 모두 무료로 개방됐음. 프로그래머라면 누구나 GNU의 소프트웨어를 가져다 수정하고 덧붙이고 개량해 다시 사람들에게 개방할 수 있었음. (유닉스의 '소프트웨어 파이프'와 동일한 매커니즘.)
 
이렇게 프로그래머들이 경제적, 사회적 굴레에서 벗어나 자유롭게 개발을 할 수 있는 소프트웨어라고 해서 "자유 소프트웨어(free software)"라는 명칭과, 그리고 1990년대부터는, 프로그래밍 소스 코드(source code)를 모두에게 개방한다고 해서 "오픈 소스(open source)"라는 용어가 생겨남.
 
리차드 스톨만은 당시 MIT의 인공지능 연구소에 근무하던 유능한 프로그래머였습니다. 그는 연구소에서 일하던 동료 프로그래머들이 하나씩 돈을 벌기 위해 떠나고, 그들이 소프트웨어 저작권과 돈 때문에 분쟁에 시달리는 것을 보고 현재의 상업적 소프트웨어 경제 시스템의 문제점을 통감합니다.
 
스톨만은 1970년대 소프트웨어가 컴퓨터 하드웨어로부터 떨어져 나오면서 상업적인 제품으로 팔리기 시작한 것은 지극히 잘못된 일이라고 주장했습니다. 그는 모든 소프트웨어는 무제한 공유되고 무료로 배포돼야 한다는 주장과 함께, MIT를 떠나 상업용 소프트웨어와의 전쟁을 선포합니다. 바로 GUN 프로젝트의 시작이었죠. GNU는 기본적으로 모든 소프트웨어를, 아무 대가나 저작권에 의한 제한 없이, 무료로 만들고 무료로 배급한다는 데서 취지에서 출발합니다.
 
특히 GNU의 소프트웨어는 모든 소스 코드를 사람들에게 공개해 소프트웨어 개발의 자유를 완전히 보장해 주었습니다. 소스 코드란 프로그래머가 보고 이해할 수 있는 프로그램의 얼개입니다. 프로그래머는 이 소스 코드를 보고 프로그램의 내용을 자유롭게 뜯어 고치고 개량할 수 있는 것이죠. 다른 상용 소프트웨어들은 소스 코드를 공개하지 않습니다. 다만 0과 1로 된, 기계만 이해하고 실행할 수 있는 2진수 기계어를 보여줄 뿐이죠. 설령, 필요에 의해 소스 코드를 공개한다 하더라도 그 소스 코드를 저작자의 허락 없이 변경하는 것은 법으로 금지돼 있습니다.
 
GNU는 그 뒤로 컴파일러와 시스템 라이브러리 등 기술적으로 뛰어난 소프트웨어를 개발하지만, 정작 OS에 핵심 모듈인 커널(kernel)은 개발하지 못합니다. 자유 소프트웨어를 위한 최초의 커널은 바로 1991년 탄생한 리눅스(Linux) 였습니다.
 
커널은 OS의 중앙 모듈입니다. 커널은 OS의 '핵심'으로 OS를 기동할 때 가장 먼저 하드웨어로부터 읽혀 메모리에 저장되는 부분이죠. 커널은 컴퓨터의 메인 메모리에 상주하면서 컴퓨터 메모리와, 프로그램 작업, 디스크 관리를 총괄합니다.
 
 
[자유 소프트웨어 진영의 '교주' 리차드 스톨만(Richard Stallman). 자신 또한 전도유망한 프로그래머였던 스톨만은 소프트웨어는 궁극적으로 상업화 될 수 없으며, 되서도 않된다는 철학을 세상에 전파하고 있음.]





 [자유소프트웨어]
오픈소스는 처음에 Free Software로 불리었다. 1984년 Richard Stallman이 설립한 FSF (Free Software Foundation) 에 의하여 시작된 Copyleft movement(일반적인 Copyright 에 대비되는 개념으로 소프트웨어를 누구나 자유롭게 사용할 것을 주장하는 사상 또는 운동)에 따라 탄생한 개념으로서 “자 유 소프트웨어”로 번역된다. 1986년, FSF 설립자인 Richard Stallman은 FSF를 통하여 “FS 4원칙”인 Four Freedoms of Free Software를 발표하여 공식적인 Free Software의 정의를 정립하였고, 이는 현재에도 여전히 유효하다. 
FS 4원칙은 프로그램을 어떠한 목적을 위해서도 실행할 수 있 는 자유 (자유 0), 프로그램의 작동 원리를 연구하고 이를 자신의 필요에 맞게 변경시킬 수 있는 자유 (자유 1), 이러한 자유를 위 해서는 소스 코드에 대한 접근이 선행되어야 하고 이웃을 돕기 위해서 프로그램을 복제하고 배포할 수 있는 자유 (자유 2), 프로 그램을 향상시키고 이를 공동체 전체의 이익을 위해서 다시 환 원시킬 수 있는 자유 (자유 3)[3]를 의미한다. 
이러한 Free Software의 FS 4원칙은 전 세계 2,000여개 이 상의 오픈소스 라이선스가 가지고 있는 세 가지 분류체계 즉, Strong Copyleft, Week Coppyleft, Permissive 중 Strong Copyleft 계열 라이선스의 대표 철학이 되었으며 대표적인 라이선스로서 GPL, AGPL계열의 라이선스가 있다. Strong Copyleft 계열의 라이선스는 이상의 FS 4원칙의 주요내용을 라이선스 의 무사항으로 요구하고 있다. 




