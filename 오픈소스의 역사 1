[ OS 혁명 ]  - 오픈소스, 자유 소프트웨어 운동의 20년을 추적한 다큐

○1 컴퓨터 산업의 짧으면서도 화려한 역사의 대부분을 윈도우 운영체제가 컴퓨터 산업을 지배해왔지만 이제 곧 상황이 변할겁니다. 리눅스라는 강력한 도전자가 나타난 것입니다.
 이제 실리콘밸리는 개인의 자유라는 정치적으로는 올바르지 않은 개념을 위해 싸우는 혁명의 제일선이 되었습니다. 해커들과 프로그래머들이 밤낮을 가리지않고 세계를 향하여 컴퓨터코드를 뿌려대고 있다. 공개된 정보와 기술의 자유로운 교환을 통하여 컴퓨터 사용자를 해방시키려는 목적을 달성하기 위해서이다. 이 혁명은 자유소프트웨어 운동과 GNU 프로젝트가 시작되었던 1980년대로 거슬러 올라간다. 그리고 지금은 리눅스와 오픈소스 운동이 혁명의 중심을 차지하고 있다. 

○2 리눅스란 무엇인가?
 컴퓨터 산업에서 현재 가장 각광을 받고 있는 분야는 바로 리눅스 관련 분야입니다. 리눅스는 사용자가 1200만이 넘으며 수백명의 프로그래머가 인터넷을 통하여 공동을 개발하고 있는 컴퓨터 운영체제이다. 그것은 마이크로소프트의 운영체제에 대한 도전이며 속도가 빨라 인기가 높은 운영체제이기도 하다. 

 리눅스가 무엇인지 설명하기 위해서는 먼저 운영체제라는 것이 무엇인지부터 설명해야 할 것이다. 설명이 만만치는 않음. 왜내면 운영체제를 정말로 사용하는 사람은 없기 때문이다. 사람들이 사용하는 것은 운영체제가 아니라 응용프로그램들이다. 운영체제의 유일한 임무는 그런 프로그램들이 작동하는 것을 도와주는 일이다. 운영체제는 그 자체로는 아무 일도 하지 않으면서 프로그램들이 어떤 자원을 요청하거나 디스크 안의 어떤 파일을 요청하거나 외부세계로 연결해줄 프로그램을 요청하기를 기다리고 있을 뿐이다. 그러면 그떄 운영체제가 등장해서 도와줌으로써 그런 프로그램을 작성하는 사람들을 편하게 해주는 것이다. 

○3 오픈소스란 무엇인가?
 오픈소스는 골치아픈 지적재산권 문제에 얽매이지 않고서 공동으로 소프트웨어를 개발할 수 있는 협동 방식이다. 소프트웨어 하나를 살 때마다 계약서를 작성해야 하거나 변호사를 선임해야 하는 일이 없도록 말이다. 일반적으로 우리는 소프트웨어가 작동하길 바라며 사람들이 그것을 수정할 수 있기를 원한다. 그러다보니 우리는 지적재산권이 조금 손상되더라도 모두가 그 소프트웨어를 사용할 수 있기를 원하는 것이다. 

○4 RMS, MIT, GNU, FSF, And how it all began.
 리눅스가 탄생하기 이전에 리차드 스톨만과 자유소프트웨어 운동이 먼저 존재했다. 리차드 스톨만은 자유소프트웨어 운동의 창시자이다. 그는 GNU 운영체제를 만들려는 과정에서 자유소프트웨어 운동의 법률적, 철학적, 기술적 토대를 구축했다. 그의 공헌이 없었다면 리눅스나 오픈소스는 아마도 오늘날과 같은 형태로 진화하지 못했을 것이다. 

 저는 1971년에 MIT 인공지능연구소에 합류했다. 저는 그 당시 번성하고 있던 해커들 즉 프로그래밍을 사랑하고 컴퓨터로 할 수있는 모든 것을 탐험하고 싶어하는 사람들의 공동체에 합류했습니다. 그들은 완전한 운영체제를 개발해냈습니다. 완전히 새로 쓰여진. 그리고 저는 그 운영체제에 새로운 기능을 추가하는 팀의 일원이 되었습니다. 그것이 저의 업무였고 저도 팀원들도 그 일을 좋아했습니다. 우리는 그 시스템을 “Incompatible Time Sharing System”이라고 불렀습니다. 이것을 해커를 정의하는 장난스러움의 한 예입니다. 해커는 장난스러운 명석함을 즐기는 사람들이다. 

○5 The beginning of the end of freedom : Passwords come to M.I.T
 그런데 처음에 바깥 사람들이 컴퓨터에 패스워드를 부여했을 때 뭔가가 잘못되고 있음을 느꼈다. 당시 컴퓨터에는 비밀번호 같은 것이 없었다. 처음 시스템을 디자인했던 해커들은 패스워드란 ㄱ서이, 관리자가 모든 사용자들을 제어할 수 있는 수단임을 알고 있었기 때문이다. 그리고 그들은 그런 도구를 만들고 싶어하지 않았습니다. 마치 열쇠나 자물쇠처럼 시스템 관리자가 그들을 통제하는 데 쓸 쑤 있는 도구 말이죠. 그래서 패스워드를 만들지 않았습니다. 그냥 내버려두었죠. 우리는 컴퓨터 앞에서 무엇이든 할 수 있어야 하고, 이제 컴퓨터 앞에 앉았던 다른 누군가가 당신이 오늘 할 일을 통제해선 안된다는 철학을 가지고 있었습니다. 그들이 MIT 의 한 컴퓨터에 패스워드를 부여하려 했을 때, 저와 한 무리의 해커들은 그것을 반기지 않았습니다. 저는 반란에 가까운 hack을 시도하기로 마음먹었습니다. 저는 패스워드를 푸는 방법을 알아냈죠. 그래서 암호화된 패스워드의 데이터베이스를 바라보는 것만으로 사람드링 로그인하기 위해 무엇을 타이핑했는지를 알 수 있었습니다. 그리고 사람들에게 메세지를 보내면서 말했습니다. 패스워드 대신에 그냥 엔터만 치는게 어떄? 그리고 물론 이 메세지와 함꼐, 보안이란 단지 농담일 뿐이라고 드러나지 않게 말하고 있었습니다. 아무튼 덧붙여서 나는 그들에게 이 hack 에 동참하기를 권유했습니다. 그리고 갑자기, 그 컴퓨터의 전체 이용자 중 5분의 1이 엔터를 패스워드로 사용하는데 동참했습니다.

<<오픈소스라고하는 아이디어가 어디에서부터 시작되었습니까? 어떻게 시작되었습니까? 누가 시작했습니까?>>

 사실 컴퓨터의 시작과 함께였습니다. 왜냐하면 그 당시에는 소프트웨어는 그냥 사람들 사이에서 돌아다니고 있었거든요. 70년대 후반에서 80년대 초반이 되어서야 비로소 사람들이 자신의 소프트웨어를 감추며 “안됩니다. 당신은 절대로 소스코드를 볼 수 없습니다. 당신이 직접 고치고 싶더라도, 당신만의 활용을 위해 변경할 수는 없습니다.” 라고 말하기 시작했습니다. 그리고 사실 마이크로소프트가 그중 일부 책임이 있죠. 그들은 독점적인 소프트웨어 모델을 만든 선구자들 중의 하나입니다. 

 1970년대 중반, 한 무리의 해커들과 컴퓨터를 취미로 하던 사람들이 실리콘 밸리에 모여 “홈브루 컴퓨터 클럽”을 결성했다. 클럽에서 발했하던 1976년 1월 31일의 뉴스레터에 최큰 마이크로스프트를 창업한 빌 게이츠가 클럽회원 전원에게 공개 편지를 보냈다. 독점 소프트웨어라는, 당시에는 비교적 새로운 개념에 대한 논점들을 설명했다. 그떄까지 컴퓨터 사용자들은 소유권에 대해서는 별 생각없이 소프트웨어를 마음대로 사용할 수 있었다. 

“취미가들에게 보내는 공개서한”이라고 알려진 글에서 빌게이츠는 취미시장에서 지금 나에게 가장 중요한 것은 
좋은 소프트웨어 교육과, 책 그리고 소프트웨어이다. 좋은 소프트웨어와 프로그래밍을 이해하는 소유자가 없다면 취미컴퓨터는 소모적이 될 것이다. 양질의 소프트웨어가 취미시장을 위해 쓰여질 것이라고 보는가? BASIC을 사용해 본 수많은 사람들이 전하는 말은 모두 긍정적이었다. 그러나 놀라울 정도로 명백한 두가지가 있다.
1)	사용자들 대부분은 BASIC을 구매하지 않았다.
2)	취미가들에 대한 판매로부터 얻은 로열티의 합은 Altair BASIC이 시간당 2달러의 가치도 없음을 의미한다.
이것은 무엇을 말하는가. 대다수 취미가들이 눈치채고 있듯, 당신들 대부분은 소프트웨어를 훔치고 있다. 하드웨어는 반드시 돈을 지불해야 하지만, 소프트웨어는 나눠 쓸 수 있는 것이다. 그것을 만든 사람이 댓가를 받는지 누가 신경이라도 쓰겠는가. 이것은 공정한가? 소프트웨어를 훔침으로써 MITS(Altair 시리즈의 제작사-역주)는 당신의 문제를 해결할 수 없게 된다. MITS는 소프트웨어 판매로 돈을 벌지 않는다. 당신은 좋은 소프트웨어가 쓰여지는 것을 막고 있다. 누가 댓가 없이 전문성이 요구되는 일을 할 수있겠는가. 도대체 어떤 취미가들이 3명의 프로그래머가 1년동안 작업하고, 버그를 찾고, 문서화한 제품을 공짜로 배포할 수있는가? 사실을 말하자면 우리를 제외고는 아무도 취미 소프트웨어에 큰 돈을 투자하지 않는다. Altair BASIC 을 재판매하던 사람은 어떤가? 그들은 취미 소프트웨어로 돈을 벌지 않았나? 그렇다. 하지만 우리에게 신고된 사람들은 나중에 가면 잃게 될 수도있다. 그들은 취미가들에게 나쁜 평판을 가져다 준 사람들이다. 어떠한 클럽 모임에라도 나타난다면 쫓겨나야 할 사람들이다. 나는 기꺼이 돈을 지불하고자 하는 사람, 또는 제안이나 커멘트를 편지로 보내주는 사람에게 감사할 것이다.

--r--
70년대 초반과 80년대 후반에 리처드 스톨먼은 MIT AL Lab 에서 인공지능 연구와 코딩을 했다. 그 기간동안 리처드는 독점 소프트웨어가 가질 수있는 모든 나쁜 요소들을 다 경험했다. 
 <<예를 들면?>>
그가 일하고 싶어했던 몇몇 회사들은 닫혀있었다. 그리고 코드를 소유한 회사는 그가 코드를 고치도록 허락하지 않았따. 그렇게하는것이 기업에게도 이익이었을 텐데도 말이죠.

 그리고 그것은 나아게 도덕적 딜레마가 되었습니다. 왜냐하면 80년대 초반 당시에 최신의 컴퓨터를 구한다는 것은 독점적인 운영체제를 구해야 한다는 것을 의미했습니다. 그러한 시스템의 개발자들은 다른사람들과 뭔가를 나누려 하지 않았습니다. 대신에 그들은 사용자들을 통제하고, 지배하고, 제한하려고 했습니다. 시스템을 얻으려면 다른사람과 공유하지 말아야 한다는 약속에 서명해야 한다고 말하면서 말입니다. 나에게 그것은 본질적으로 나쁜 사람이 되기를 강요하는, 세계의 나머지 부분을 속이고 나 자신을 협동적인 공동체 사회로부터 단절시ㅣ라는 약속이었습니다. 그들은 계약에 서명했기 때문에 다른사람들이 우리와 공유하기를 거부하고자 할 때 그와 같이 한다는 것을 나는 이미 경험했습니다. 그리고 그것은 연구소 전체에 해를 끼쳤습니다. 예전의 유용한 일은 못하게 되었습니다. 저는 그래서 그러지 않기로 했죠. “이건 잘못되었어!” 이렇게 살지는 않겠다고 생각했습니다.

----
 이와 같은 경험들로부터 그는 지적재산과 소프트웨어에 관한 뿌리깊은 적의를 키워나갔습니다. 그는 결국 자유소프트웨어재단을 세웠습니다. 

----
그래서 저는 또다른 대안을 찾았고, 저 자신이 운영체제 개발자임을 깨달았습니다. 만일 제가 다른 운영체제를 개발할 것이라면 그떄는 개발자로써 모든 사람이 공유할 수 있도록 장려할 것입니다. 나 자신이 다른 사람들을 속이지 않고 컴퓨터를 사용할 수 있을 뿐만 아니라 다른 모든 사람들에게 줄 수도 있습니다. 모든 사람들이 그러한 도덕적 딜레마로부터 오는 길을 갈수 있습니다. 그리고 저는 이것이 제가 인생을 통해 하고자 했던 일임을 깨달았습니다. 저는 1984년 1월에 프로젝트를 시작했습니다. 제가 MIT 일을 그만두고 GNU 운영체제 개발을 시작한 해이기도 합니다. 이제 GNU라는 이름이 일종의 hack 임을 설명하겠습니다.

 이것은 재귀적인 두문자로, “GNU’s Not Unix”를 뜻합니다. (GNU = GNU’s Not Unix) 이 이름의 의미는 제가 유닉스 운영체제와 비슷한 시스템을 개발하고 있었다는 것입니다. 그러나 유닉스 운영체제는 아니었습니다. 그것은 다른 시스템이었습니다. 우리는 그것을 바닥부터 완전히 새로 짜야 했습니다. 왜냐하면 유닉스는 독점적이기 때문입니다. 유닉스를 공유하는 것은 금지되어 있었습니다. 우리는 유닉스를 사용할 수 없었습니다. 유닉스는 우리에게 쓸모가 없었습니다. 그래서 우리는 대체물을 작성해야 했습니다. 

----
(나레이션)

1980년대를 통해, 리처드 스톨먼이 GNU 프로젝트를 건설하는 동안 캘리포니아 대학 버클리 분교의 컴퓨터 과학자들은 버클리 유닉스 또는 BSD라고 알려진, AT&T 로부터 라이센스 받은 유닉스 커널에 기초한 자유로운 운영체제를 개발하고 있었다. 그러나 AT&T와 법적문제, 소스코드의 분열로 해커들과 산업계 외부의 사용자들은 그것ㅇ르 채택하는 것이 늦었다. 

----
유닉스는 많은 수의 서로 분리되어 통신을 주고받는 프로그램들로 구성된다. 우리는 이러한 프로그램들을 하나하나 교체해야 했다. 그래서 뭘 시작했내면 프로그램의 대체 프로그램을 작성하고, 계속해서 대체물을 만들고 또 만들었다. 그리고 그 때 사람들이 제가 시작한 프로젝트에 와서 프로그램들 작성하는 것을 도와달라고 발표한 것을 보고는 제 작업에 동참하기 시작했다. 1991년쯤에 식제로 모든 대체 작업을 끝냈다. 

<<그런 프로그램의 예로는?>>
 우리는 완전한 시스템을 가져야 했다. 커널이라고 불리우는, 다른 모든 프로그램들이 사용하는 자원을 할당하는 프로그램이 필요했다. 컴파일러라고 하는 사람이 읽을 수 있는 숫자로 된 소스코드로부터 컴퓨터가 실제로 실행시킬수 있는 미스터리한 숫자들로 된 프로그램으로 번역해주는 프로그램이 필요했다. 컴파일러와 함께 이런 일을 할 수 있는 다른 프로그램들이 필요했다. 디버거가 있어야 한다. 텍스트 편집기도 있어야한다. 텍스트 포매터가 있어야한다. 메일 발송 프로그램이 있어야한다. 그외에도 수많은 프로그램들이 필요했다. 유닉스와 비슷한 운영체제에는 수많은 프로그램들이 있다. 

----
스톨먼의 발표문을 보았다. 실제로 그를 만난것은 1987년 2월이었다. 그는 우리 회사에 5일짜리 이맥스(Emacs)강연을 하러 왔다. 그리고 하루종일 Emacs 에 대해 생각하는 새로운 방법, 확장하고 기능을 강화하는 방법을 설명했고, 더 좋건 더 나쁘건 Emacs 소스코드를 이요하는 방법을 설명했다. 그러자 저녁이 되자, 그는 바쁘게 컴파일러로 작업을 했고 아직 공개 배포는 하지 않았다. 그래서 그는 조금 조심스러웠다. 누구한테 소스코드를 보여줄지에 대해서 말이다. 그러나 저는 몹시 애타는 심정으로, 그가 처음 발표한 6월에 즉각 다운로드 했다. 전 그것을 가지고 놀았따. 그로부터 몇가지 지침을 얻었다. 그리고 제가 그에게 소스코드를 보내주었을 때 그는 매우 제가 어떻게 그토록 빨리 그의 기술을 이해했는지에 대해 놀랐다. 우리가 스탠포드나 대학에서 어떤 일을 할 때 마다 대부분은 썬사의 머신들과 함께 작업을 한다. 우리에게 썬 머신이 생길 때마다 가장 먼저 하는 일은 말 그래도 하루종일 인터넷으로부터 GNU 자유소프트웨어를 다운받고, 빌드하고, 썬 머신에 설치하는 것이다. GNU 에서 가장 본질적인 것은 자유소프트웨어라는 것이다. 그리고 자유소프트웨어란 가격이 아니라 자유를 가리킨다. “공짜 맥주”가 아니라 “자유발언”을 생각하시면 된다. 제가 말하려는 자유는 당신이 원하는대로 바꿀 수 있는 자유이다. 또는 다른 누군가를 고용해서 당신을 위해 변경하도록 하는 것이다. 당신이 사업을 목적으로 소프트웨어를 사용하고 있다면 복사본을 재배포하고, 다른 이들과 공유하고 , 개선하고 다시 공표하는 것은 다른 사람들 역시 그로부터 이익을 얻게 한다. 이런 것들이 자유소프트웨어가 아닌 것으로부터 자유소프트웨어를 구분하는 자유이다. 이것은 사람들이 공통체를 구성하는 것을 가능하게 해주는 자유이다. 당신에게 이러한 모든 자유가 없다면 당신은 다른 누군가에 의해 분리되고 지배될 것이다. 
 
----
자유소프트웨어에 기여한 첫번째 경험은 1989년 말, 1990년 초였다. 저는 스탠포드 대학의 대학원생으로 CAD 관련 일을 하고 있었다. 제게 필요했던 것 중 하나는 파서 생성기라 불리우는 툴이었다. 리처드 스톨먼의 자유소프트웨어 재단에서는 “bison”이라고 불리는 훌륭한 툴을 만들었다. 저는 C++과 함께 동작하는 툴이 필요했는데 bison은 C와 동작했다. 저는 bison 을 변경하여 “bison ++”이라고 하는 것을 만들었다. 그리고 이것은 나에게 큰 힘이 부여되는 듯한 굉장한 느낌이었다. 소프트웨어의 한 부분을 가져다 쓸 수있고, 짧은 시간동안 변경하는 것만으로 필요한 것을 만들어낼 수있었다. 

----
저는 그것을 다시 인터넷에 올렸고, 수많은 사람들이 그것을 가져가서 사용하기 시작했다는 사실에 놀랐다.
  
----
자유소프트웨어는 일반적으로 저작권을 가지고 있다. 소유자가 있고 라이센스도 있다. 그냥 퍼블릭 도메인은 아닌 것이다.

----
만일 소프트웨어를 퍼블릭 도메인에 둔다면 다른 누군가가 약간의 수정을 한 뒤에 그것을 독점 소프트웨어 패키지로 만들 수 있다. 이것을 우리의 소프트웨어를 이용할 사람들이 협력하고 공유하는 자유를 갖지 못한다는 것을 의미한다. 극서을 막기 위해 우리는 “카피레프트”라는 기법을 사용한다. 카피레프트의 아이디어는 뒤집한 저작권에서 나왔다. 그리고 우리가 하는것은 , 우리가 말하는 것은, 이 소프트웨어의 저작권이 보호받는다는 것이고, 우리 저작자들은 복사본의 재배포를 허용하고, 수정권한을 주고, 뭔가를 추가할 수 있는 권한을 주지만, 그러나 이것을 재배포할 때는 더도 덜도 아니고, 이 조항들에 의거해야만 한다. 그래서 이것을 접한 누구라도 그가 원한다면, 다른사람들과 협력할 수 있는 자유를 얻을 수 있다. 그리고 이러한 방법으로 소프트웨어들이 만들어지는 모든 곳에서 자유 역시 커지느 것이다. 그리고 이것은 다른 사람과 협력하고 공동체를 구성하는 데 있어 양도할 수 없는 권리가 될 것이다. 

<<그렇다는 그게 뭐죠? 그 라이센스?>>
카피레프트는 너무 추상적인 개념이라. 그것을 사용하기 위해서는 구체적인 사례를 들어야한다. 대부분의 GNU 소프트웨어 패키지들을 위해 우리가 사용하는 구체적인 예는 이 작업을 완수하기 위해 법률용어로 작성된 특별한 문서인 GPL (GNU General Public License) 이다. 다른 많은 사람들이 이 라이센스를 쓴다. 예를 들어, 리누스 토발즈 역시 리눅스를 위해 이 라이센스를 사용한다. 

----
제가 사용하는 라이센스는 GNU이다. 리처드 스톨만이 작성한거죠. 그리고 저는 그것이 모두가 깜짝 놀랄만한 공헌이라고 생각한다. 그것은 회사를 보호할 목적이 아니라 공동체의 관점에서 쓰여진 유사한 예를 찾기 힘든 라이센스이다. 또는 MIT와 BSD 라이센스의 경우가 보여주듯 정부인증 프로그램이라는 목표를 수행한다. 그리고 GPL은 그점에서 정말로 독특하다. 그것은 단순히 라이센스가 아니라 완전한 철학이다. 제 생각에 오픈소스 정의에 모티브가 되기도 했구요. 저는 제가 한 많은 것이 스톨먼으로부터 왔다는 것을 숨기지 않습니다. 

○6 Free Software goes Free Enterprise: GNU gets its first Start-up.
 (나레이션)
 GNU/Linux와 자유소프트웨어 운동의 성장에 있어 중요한 발걸음은 소프트웨어와 철학에 기초한 사업의 창출이었다. 사업 단계의 시작을 위한 발화점은 스탠포드 대학의 Electronics Research Lab 이었다. ERL 로 알려진 이 연구소는 최초의 GNU와 리눅스 비즈니스  창안자가 영감을 얻은 곳이다. 

----
마이클 티만은 GNU 자유소프트웨어에 관련한 컨설팅과 서비스를 판매할 생각으로 시그너스 소프트웨어를 창업했습니다. 그리고 마이클은 시그너스에서 그 일을 잘 해냈죠. 

----
저는 많은 시간동안 일을 헀고 Emascs 메뉴얼의 마지막 장에 있던 원본 GNU 선언을 가지고 어떻게 돈을 벌지 생각을 했습니다. 스톨먼은 돈을 벌 수 있는 여러가지 다양한 방법들을 제안했습니다. 

----
자유소프트웨어 운동의 초기부터 저는 수익을 낼 수 있는 여지가 있다고 믿었습니다. 자유소프트웨어의 이점 중의 하나는 서비스나 지원을 위한 자유로운 시장이 존재한다는 점입니다. 그래서 만일 사업에서 소프트웨어를 사용하고 좋은 지원을 원한다면, 부를 사람들을 선택할 수가 있고, 기술 지원을 제공하는 사업을 하는 사업자를 골라잡을 수있어요. 대체로 그쪽에서 지원을 잘해줘야되고 그렇지 않다면 다른 사람을 찾는거죠. 독점 소프트웨어에선, 지원은 독점체계고 소스를 가진 회사는 대체로 하나입니다. 그들만이 지원을 해줄 수 있어요. 그렇기 때문에 대체로 독점의 횡포위험이 있습니다. 예를 들자면 마이크로소프트의 경우가 그렇습니다. 지원이 그렇게도 나쁜게 당연하죠. 

----
자유 소프트웨어의 이점은 엄청났지만 회사내에서 이를 지원하기 위한 비용은 관리직 직원들을 매우 불안하게 했기에 제가 낸 근본 아이디어는 사내의 엔지니어가 제공해주는 것보다 2~4배가 되는 기술지원과 hand holding capability 를 제공해주는 모델을 만드는 것이었습니다. 사람들이 실제로 구매를 할지 결정이 나는 단가의 1/2에서 1/4 수준에서 완성이 가능했습니다. 그리고 그해 가을에는 모든 계획이 짜여있었어요. 기술 팀엔 누굴 넣고 매매조건은 어떻게 되고 핵심적인 가격 결정 요인은 뭐고 등등 전부가요. 실제로 1989년 12월에 우린느 사업인가를 받았습니다. 창업활동 중 가장 힘들었던 것 중 하나는 회사 이름을 짓는 것이었습니다. GNU 라고 적인 종이들이 뭉텅이로 있었는데 그중 “Cygnus”가 제일 덜 괴상하고 덜 외설적이였다.

----
Cygnus는 자유 소프트웨어를 특기로 삼는 첫 사업이라고 전 확언할 수 있습니다. Cygnus는 자유 소프트웨어를 지원했고, 필수적인 틈새시장에서 파고들었습니다. 뛰어난 스프트웨어를 공짜로 구할 수있었지만 지원을 얻을수는 없었고 그들은 지원사업으로 돈벌이를 시작했습니다. 

----
GNU 프로젝트는 툴킷(일종의 도구모음)을 작성하면서 시작했는데, C컴파일러, 디버거 (오류수정기), 문서 편집기와 같은 기본적인 개발 도구들, 그리고 다른 유용한 소프트웨어들을 개발하는 것이었습니다. 그리고 프로젝트의 목표는 궁극적으로 이런 소프트웨어들 아래에서 동작하면서 운영체제의 중심이 되는 커널을 개발하는 것이었습니다. 1990년 경에 이르러 GNU 프로젝트는 목표한 툴킷을 개발하는데 성공했고, 다양한 유닉스 운영체제들에서 널리 사용되었다. 그러나 아직 자유 소프트웨어에 속하는 커널은 없었습니다. 
 
----
커널 개발은 GNU 프로젝트의 개발 과정 중 마지막 부분에 속하는 속하는 것이었고 개발을 시작한지 얼마되지 않은 때였습니다. 그리고 바로 그때 리누스 토발즈가 나타났습니다. 
 
그는 하나의 ‘커널’을 개발했고 이것은 우리의 것보다 훨씬 빨라요. 또한 훌륭하고 안정적으로 작동을 하죠. 그게 리눅스라고 불리는 커널이에요. 

----
초기의 목적은 무척이나 개인적인 것이였죠. 대학 컴퓨터에서 익숙해졌던 것과 유사한 것을 제 PC에서 실행시킬 수만 있다면 좋겠다 싶었죠. 그런데 저한테 딱 맞는 것을 전혀 찾을수없었습니다. 그래서 말하자면 평생 컴퓨터를 해온 저는 그때 직접 만들어보겠다고 결정했습니다. 초반의 영감은 대부분 SunOS에서 왔습니다. 그 당시 대학에서 쓰던 거였죠. 

----
제가 생각하기에 1991년부터 1993년까지의 시기는 사실상 리눅스의 유년기였습니다. 이 시기에 리눅스는 여전히 알파 또는 베타 수준에 있었습니다. 비교적 불안정한 상태였습니다. 그러나 이 시기에도 다른 상용 운영체제들보다는 훨씬 더 안정적이었습니다. 

----
리누스는 전통적이고 검증된 방식을 이용했습니다. 주어진 작업을 맡아서 처리하는 하나의 프로그램을 만든거죠. 이런 방식을 이용한 개발은 예상했던 것보다 훨씬 더 빨리 이루어졌습니다.

----
이러한 방식에 대해 “monolithic (모놀리식)” 이라는 용어를 사용하는데, 기본적으로 운영체제 자체가 분할할 수 없는 하나의 실체라는 것을 의미한다. 음, 반면에 microkernel(마이크로커널)에서는 운영체제의 커널이 실제로는 단지 서버들의 집합체에 불과합니다. 서버들은 각가 서로 다른 일들을 수행하며 미리 약속된 규약 (프로토콜)에 따라 다른 서버들과 통신을 합니다.

----
<<그럼 그건 왜그런가요, GNU 프로젝트는 준비기간이 길었고, 그 일을 계속해왔는데, 왜 어째서 그는 말하자면 꼴찌로 합류할 수 밖에 없었던거죠?>>
 사실 리눅스의 개발이 시작되기 오래전부터 GNU Hurd 의 개발이 진행되었던 것은 아닙니다. 또 사용자에게 제공하는 강력함이라는 측면에서 우리가 아주 진보적인 디자인을 채택했기 때문이기도 합니다. 그러나 그것은 또한 디버그 (오류수정)하기에 앚 어려웠습니다. 우리는 전통적으로 단일 프로그램으로 구성되었던 커널을 분할하기로 결정하고는, 커널을 많은 수의 작은 프로그램들로 분할했습니다. 각각의 작은 프로그램들은 다른 프로그램들과 통신하기 위해 비동기적으로 메세지를 보냅니다. 문제는 바로 이같은 방식의 프로그래밍 방법이었습니다. 이런 방식의 프로그램에는 아주 많은 버그들이 존재할 가능성이 있고, 프로그램들이 상호의존적으로 동작하기 때문에 때로는 문제의 원인을 찾아내는 것이 아주 어렵습니다. 이 프로그램이 이 메시지를 보낸 시점이 다른 프로그램이 다른 메시지를 보내기 전인지 후인지 등등의 문제들 떄문에요… 그리고 그 결과 이 프로그램이 동작하도록 만드는데 몇년이 걸렸습니다. 

----
<<리눅스는 GNU 프로젝트와 어떤 관계에 있습니까?>>
 GNU 프로젝트와는 여러 차원에 걸쳐 관계를 갖고 있습니다. 그 중하나는 철학적 차원인데, “자신의 소스 코드를 공개하는 것은 좋은 생각이다”라는 거죠. 

----
리누스는 GNU 프로젝트 차원에서 커널을 개발한 것이 아니었습니다. 그는 독자적으로 커널을 개발했습니다. 그리고 독자적으로 커널을 발표했고, 우리는 그 사실을 알지도 못했습니다. 그러나 리누스의 커널에 대해 알고 있었던 사람들은 이용할 수 있는 커널을 찾고 있었고, 리누스의 커널을 이용해서 완전한 시스템을 만들려고 했습니다. 그들은 완전한 시스템이 갖추어야 할 구성요소들을 찾기 시작했고, 필요한 모든 것들이 이미 이용가능한 상태라는 것을 알게 되었습니다. “이거 대단한 행운인데@”라고 그들은 생각했습니다. 그러나 실제로 이들은 완전한 시스템을 구성할 기회를 갖기는 못했습니다. 이들은 단지 커널만이 빠져 있었던 GNU 시스템의 모든 부분들을 하나씩 찾고 있었던 것이었습니다. 그래서 그들이 이 모든 것을 하나로 모으려고 할 떄, 실제로 그들은 GNU 시스템에서 빠져있던 커널의 자리에 리눅스를 끼워넣고 있었던 것이었습니다. 그러나 그들은 그 사실을 몰랐습니다. 

○7 1991 : Version 0.01 of Linux has 10,000 lines of code and one user 
 이런 프로그램들이 많이 있습니다. 자유 소프트웨어 재단에 의해 작성된프로그램들도 있고 리눅스처럼 다른 사람들에 의해 작성된 프로그램들도 있습니다. 그리고 리눅스와 이런 프로그램들은 서로 공생관계를 맺고 있습니다. 프로그램들은 리눅스 위에서 실행되었고, 동시에 플랫폼으로서 리눅스를 이용합니다. 반면 리눅스는 단지 그 프로그램들이 실행될 수 있도록 함으로써, 그 프로그램들을 이용합니다. 

<<어떤 프로그램들을 말씀하시는 건가요?>>
 가장 중요한 프로그램은 GNU C 컴파일러입니다. C컴파일러 없이는 어떤것도 가능하지 않을 것입니다. 리눅스를 만들거나 다른 종류의 열려진 개발을 진행하는 것도요. 리눅스는 GPL을 라이센스로 합니다. 그리고 저는 GPL이 기반하고 있는 철학에 대해 동의합니다. 그건 그렇지만, GPL 자체는 그렇게 재미있는 문서는 아닙니다. 법률 용어라는 것이 원래 재미없는 것이기 때문이겠죠.

○8 1992 : Version 0.96 of Linux has 40,000 lines of code and 1,000 users (23:31)
 제가 리눅스를 갖고 놀기 시작한 것이 그러니까 92년 말인가 93년 초였는데, 1년쯤 그러고는 이제 필요한 모든 것이 정말 다 갖춰졌다고 판단했습니다. 선(Sun) 윅스테이션을 완전히 교체하는데 필요한 것들 말이죠. 

----
저는 유닉스 윅스테이션을 집에 두는 방법을 찾고 있었습니다. 그떄 우리는 선(Sun) 스팍 스테이션을 스탠포드의 연구실에서 썼습니다. 그 기계들은 대략 7,000달러 정도 했습니다. 저는 정말 유닉스 기계를 집에 두고 싶었습니다. 

----
대학원생이라는 누구나 이런 생각을 했을 겁니다. “내가 집에서 일할수만 있다면! 그럼 훨씬 더 생산적으로 일하게 될 테고, 더 빨리 졸업할텐데.” 글쎼요 사실일까요? 알아서 판단하세요. 아시다시피, 많은 사람들은 많은 시간을 들여서 보다 생산적으로 되려하죠. 결과적으로 실제로 논물을 시작하면 하루만에 끝낼 정도로요. 어떤 때는 많은 시간이 들기도 합니다. 그래서 저는 유닉스 기계를 집에 두고 싶다고 마음먹은 거죠. 저는 당장에 리눅스를 PC에서 쓸수 있었습니다. 대략 2,000달러로 시스템을 마련했습니다. 

----
그리고 그것을 1.5에서 2배나 더 빨랐습니다. 7,000달러짜리 선(Sun) 스팍 스테이션보다 말이죠. 정말로 놀라웠습니다. 1.5에서 2배의 속도를 3분의 1에서 4분의 1의 가격에 얻은 것입니다. 어떤 생각이 뇌리를 스쳐습니다. 여기에 기회가 있다는 것을 알았습니다. 이것은 선()이 해온것보다 정말로 뭔가더잘할수있는 오픈소스와 리눅스가 가져오는 기회였습니다. 

----
저는 이것을 작업이름으로 리눅스라고 불렀습니다. 그냥 단순히 “리누스”때문인데 “X”가 반드시 있어야 했습ㄴ디ㅏ. 이건 유닉스고 이런건 지켜져야 할 규칙같은것입니다. 저는 처음에 이것이 너무 자기중심적인것 같아서 부를수 없었다. 

----
사람들은 이것을 리눅스에 굉장히 많은 구성요소를 붙여놓은 것이라고 생각했습니다. 그래서 이 전부를 “리눅스 시스템”이라고 부르기로 했습니다. 그리고 어쩌다가 그 이름이 인기를 얻었습니다. 그리고 그 결과는 이제 천만명의 사람들이 이 여러종류의 다양한 GNU 시스템을 사용한다는 것입니다. GNU/리눅스 운영체제를 말입니다. 그리고 그들 대부분이 이 사실을 모릅니다. 

----
<<어떤 사람들은 이것은 GNU/리눅스 라고 부릅니다. 그러니까 이런것에 대해서 어떻게 생각하십니까? 정당하다고 생각하십니까 아니면…?>>
 저는 정당하다고 생각합니다. 단 GNU원칙을 제대로 지켜서 배포판을 만들었을 경우에만 그렇습니다. 레드햇 리눅스나 수세(SuSE) 리눅스, 데비안 리눅스가 괜찮은 것처럼 말입니다. 음 만약 당신이 직접 리눅스 배보판을 만든다면  당신이 그것의 이름을 짓는 것입니다. 하지만 리눅스를 일반적으로 “GNU/리눅스”라고 부르는 것은 제 생각에는 아주 터무니 없는 것입니다.  
----
저는 93년 가을에 참가하게 되었습니다. 왜냐하면 그때 천 첫 상용 리눅스 CD ROM을 받았기 때문입니다. 아담 리히터가 만든 이그드라실(Yggdrasil) 이라 불리는 것이었습니다. 그리고 제가 그 카피를 받은건 저는 80년대 초부터 오랫동안 자유 소프트웨어를 만들어왔기 때문입니다. 실은 제 자신이 초기 GNU의 공헌자 중 한명이었습니다. 저는 굉장히 놀랐습니다. 왜냐하면 전 그떄 당시 거의 15년이나 소프트웨어 엔지니어로 있었기 떄문입니다. 그리고 제가 아는 모든 규칙들에 의하면 복잡성을 제어하고 프로젝트 그룹을 작게 유지시키는 것, 세세하게 목표사항에 신경쓰는 것 등에 의하면, 리눅스는 재앙이 되었어야 했는데 그렇지 않았습니다. 대신 끝내주는 물건이 되었습니다. 그래서 저는 어떻게 그렇게 해날 수있었나 알아봐야 겠다곤 굳게 결심했죠. 
	
----
(나레이션)
 리눅스가 컴퓨터 프로그래머들만의 세계에서 벗어나서 성장하려면 리눅스를 필수기술이 될수있도록 해주는 어플리케이션이 필요했죠. 이러한 임계점을 지난것은 아주 복잡한 웹사이트를 개발하는데 필요한 프로그램이 등장하면서였죠. 그 프로그램이 아파치 웹서버입니다. 

----
○9 1993 : Version 0.99 of Linux has 100,000 lines of code and 20,000 users
리눅스의 킬러 어플리케이션이란 바로 이 아파치 웹서버였죠. 리눅스의 역사를 보신다면, 리눅스의 적용도와 인터넷의 적용도가 서로 완전히 똑같다는 것을 알 수있습니다. 1993년에 아파치 웹서퍼 프로젝트가 시작했을 때가 유명 ISP들이 생겨나고 있었을 때입니다. 그떄 인터넷은 처음으로 대량으로 소비되는 공산품이 되었죠. 그리고 웹기반의 전자상거래라는 개념과 웹기반의 매스커뮤니케이션이 현실화되기 시작한 떄죠.

----
제 생각에는 그게 바로 사람들을 매혹시킨 처음 몇몇 어플리케이션 중 하나였던 것 같습니다. “만약 제가 리눅스를 설치한다면 약간은 이익이 있겠죠?” 이렇게 사람들이 생각할 만한 그런 것 말입니다. 물론 여러가지 재미있는 애플리케이션이 많았죠. 그러니까 지금으로부터 2,3년 전 쯤 이야기입니다. 뿌리는 이미 시작되었는데, 뭔가 추진력을 줄만한게 없었죠. 그떄 비로소 이런 사업기획이 가능해졌죠. 리눅스에 아파치 웹서버와 여러가지 플러그인들이 나오기전까지 NT를 쓰고 있던 사람들에게 리눅스로 바꾸도록 말이에요. 서버 팜을 구성하고 싶으면 서버팜을 구성해도 되죠. 가격적으로 엄청난 이점이 있었거든요. 가격적 이졈, IIS 와 NT를 사용했을 때보다 리눅스와 아파치를 쓸 때 절감 할 수 있는 진짜 돈말이죠. 설령 그것을 쓰도록 직원들을 훈련시키거나 아니면 잘아는 전문가들을 고용하거나 하는데 어느정도 비용을 들인다는 것을 뜻한다고 해도요. 하지만 좋은 소식은 그런 지식이 그다지 비싼것이 아니었다는거죠. 리눅스를 오랫동안 써왔던 대학생들도 많았고 이들은 리눅스를 무척 잘 알고 있었거든요. 

----
웹서버에서의 경향을 보면 아파치는 꾸준히 시장점유율이 증가하고 있어요. 이젠 한 66% 정도 되죠. 오픈소스 아닌 경쟁제품들을 점차 잠식해가고 잇죠. 왜냐하면 이게 더 신뢰성 있고 유연하고 확장성이 좋거든요. 그게 바로 웹마스터들이 필요로 하는 것이기도 하구요. 그리고 아파치와 리눅스의 조합이 대단히 많은 회사에서 쓰이기 시작했죠. 

----
(나레이션)
결국, 아파치는 ISP 들과 전자 상거래 회사들이 마이크로소프트 윈도우즈 대신 리눅스를 선택하도록 하는 어플리케이션이 된 셈이죠. 

----
아마 리눅스와 FreeBSD에서 가장 잘 돌아갈 겁니다. 왜냐하면 이 운영체제를 둘러싼 공동체들이 결국에는 아파치에 가장 큰 공헌을 한 공동체들이거든요. 그렇죠? 그리고 그 운영체제들을 ISP에서 대단히 많이 사용했구요. 또 ISP들은 아파치를 굉장히 좋아했어요. 아파치가 다른 상용 웹서버들이 못하는 여러가지 일을 할 수있도록 해줬거든요. 예를 들어 하나의 기계에 1개 이상의 웹사이트를 호스팅할 수 있는 능력이라던지 하는 것은 만약 ISP가 40,000 사용자를 가지고 있고 이들 각자가 자신의 웹사이트를 가지려고 한다면, 굉장히 중요한 관건이 되겠죠.  

-----
(나레이션)
리눅스 성장의 중요한요소 중 하나는 배포와 운영체제 자체에 대한 기술지원을 전문으로 하는 회사들의 등장이죠. 이런회사들 중에는 레드햇이 가장 유명하죠. 레드햇은 마크 유잉이 만든 소프트웨어로 시작했습니다. 그것은 그가 IBM에서 일하고 있었을 때 만든 것입니다. 그는 좀더 나은 리눅스 배포본을 원했고, 그래서 일을 시작했죠. 그러다가 보니, 리눅스 배포판에 들이는 시간이 새로운 프로젝트에 들이는 시간보다 많아진거에요. 그래서 결국 그것의 배포를 시작하게 되었고 밥 영과 만나게 되었죠. 밥 영은 ACC 서적이라는 회사를 운영하고 있었는데, 그것은 우편으로 주문하는 PC용 유닉스 가탈로그 였습니다. 밥영은 자기가 뭔가를 찾고 있다는 것을 알았습니다. 다른 사람의 물건을 떼어 파는 대신에 자기 자신만의 것을 팔고싶어 했죠. 그리고 마케팅에도 꽤 재능이 있었어요.  그리고 마침 마크는 마케팅의 도움이 필요하다는 것을 알았구요. 그는 기술적인 부분에 뛰어났기 때문이죠. 그래서 그 둘이 힘을 합쳤습니다. 1995년 5월에 노스캐롤라이나 주립대학을 졸업하고 바로 레드햇에서 일하기 시작해썽요. 에릭 트로안이랑 같이 일했는데, 4번째와 5번째 직원이었죠. 마크 유잉이 살던 아파트에 가서 일했었어요. 그 아파트가 레드햇 소프트웨어의 개발부서였던 셈이죠. 그러곤 1995년 11월까지 그 상태로 있었는데 그떄 화장실이 터졌ㅇ요. ㅋㅋㅋ

○10 1995 : Version 1.2 of Linux has 250,000 lines of code and 500,000 users
 95년 즈음에, 벤쳐 캐피탈 회사에 다시 가서 여기 뭔가 일어날거다, 큰 사업기회가 있다하면서 말했죠. 오픈소스를 위한 차세대 선(Sun) 시스템을 만들기 위해서요. 벤쳐케피탈 사람들이 보더니, “아니 시스템을 팔면서, 소프트웨어는 공짜라니, 이거 겁나는 이야기군요 이런데 돈을 투자해야 될지 확신이 안서는군요, 게다가 다른 여러 시스템 회사들에 투자했지만 결과가 별로 좋지 않았어요. 우린 꺼려지는군요”
 
○111997 : Version 2.1 of Linux has 800,000 lines of code and 3.5 million users
(Eric Raymond) 그 다음으로 일어난 큰 사건은 제가 관여했던거죠. 논문을 썼어요. 이른바 “시장과 성당” 저의 고찰이자, 인류학적 분석이죠. 무엇이 오픈소스의 세계가 동작할 수 있도록 만들었는지 그때만해도 그렇게 안부르고 “자유 소프트웨어”라는 말을 주로 사용했죠. 그러니까 그건 무엇이 자유 소프트웨어 세계를 움직이고 있는지에 대한 저의 고찰이었죠. 그리고 왜 우리가 초 고품질의 소프트웨어를 만들수 있었는지 소프트웨어 공학에서 사용하는 모든 표준규칙을 지키지 않으면서도 말이에요. 그 논문에서 극명한 대비를 설정했죠. 두가지 완전한 다른 개발 스타일, 두가지 상반된 개발 스타일 말이죠. 하나는 이전의 폐쇄적 개발 스타일이죠. 제가 “성당” 스타일이라고 부르는 것이죠. 이 스타일에는 목표에 대한 상세한 명세가 있어요. 소규모의 프로젝트 그룹이 체계적, 권위주의적인 방법으로 운영되죠. 릴리즈 간격은 매우 깁니다. 
 반면에, 제가 리눅스 시계에서 일어나고 있는 것을 볼 떄에는 훨씬 개인대 개인으로 분산적이며, 일종의 시장이나 장터스타일의 매우 짧은 릴리즈 간격을 가지고있습니다. 그리고 프로젝트 외부의 사람들로부터 끊임없는 피드백을 요구하죠. 상당히 집중적인 상호검토 과정이죠. 놀라운 점은 이것을 점차 들여다 볼수록 기존의 폐쇄적 개발방법의 모든 이점을 버리고 대량의 개별적 상호 검토라는 단 하나의 이점만을 추구하는 방법이 실제로는 이기고 있다는 겁니다. 실제로 좋은 결과를 가져다 주는 것처럼 보인다는 겁니다. 

 Free Software and Netscape’s big gamble
(Bruce Perens) 넷스케이프가 중요한 것은 오픈소스에 참여한 첫 대형 업체라는 점이죠. Cygnus가 지원을 해주고 있긴 했지만, 사실 사업은 그다지 크지 않았어요. 넷스케이프는 기본적으로 마이크로소프트에 대항하기 위해 오픈소스로 간겁니다. 마이크로소프트는 인터넷 익스플로러를 거저주고 있었거든요. 그 대신 아무도 소스코드를 가질 수 없었고, 어떤 회사도 협력관게를 구할 수 없었죠. 

(Frank Hecker) 세일즈 팀에서 일하면서, 저도 어느 정도쯤은 뭐랄까, 왜 사람들이 우리 소프트웨어를 구입하는지 느낌이 있었어요. 과연 무엇으로, 경쟁사에 대항해서 우리 소프트웨어를 시장에서 성공할 수 있게 할 수 있을지. 그런데 문제는 시간이 지남에 따라서 알게 되었죠. 우리 소프트웨어가 다른 사람들의 소프트웨어와 경쟁하고 있다는 것을 ,특히 마이크로소프트 제품과. 그리고는 시간이 지날수록 우리 소프트웨어 가격을 떨어뜨려야만 했어요. 다른사람들은 그들의 소프트웨어를 그냥 주고 있었으니까요. 공짜이거나 거의 공짜와 다름없는 가격으로.  

(Eric Raymond) 진짜 문제는 그들이 걱정하고 있었다는 것이죠. 마이크로소프트가 브라우저 시장에서 독점체계를 구축해서 그 독점체계를 이용해서 웹의 기반이 되는 HTTP와 HTML표준을 제멋대로 변형시키고 있었다는 것이죠. 일단 이 표준을  단말기에 모두 넣어 놓으면, 그럼 그것을 조종해서 서버 시장에서 넷스케이프를 몰아내려 할거라는걸. 진짜 돈은 거기서 벌고 있엇거든요. 

((Frank Hecker))걱정되는 점은 시간이 지남에 따라, 넷스케이프의 사업이 위협을 받는다는 거죠. 시장에서 우리 제품이 살아남을 수 있도록 하기 위해 해야할 모든 일들을 할만큼 많은 사람이 우린 없었거든요. 

(Eric Raymond) 넷스케이프 릴리즈는 1998년 초반에 나왔습니다. 그리고 나선 나중에야 이 사실을 알았어요. 이러한 일이 행해지게 된 원인이 “성단과 시장” 논문을 딱 적당한 사람들이 읽게 되었기 때문이란 것을.

(Frank Hecker) 에릭 레이먼드의 논문 “성당과 시장”은 소스코드를 릴리즈하기로 한 넷스케이프의 결정에 큰 영향을 미쳤습니다. 

(Eric Raymond) 사실 저한테는 경악할 일이었죠. 사실 저로써는 감히 생각해본적이 없었죠. 설령 우연하게나마라도 제가 세상을 바꾸도 있다는 것을. 

(Frank Hecker) 그렇지만 이 결정을 하게 된 원인은 그 이외에도 많이 있엇죠. 그리고 그가 가장 중요한 영향을 끼친것도 아니었구요. 다른 영향도 많았구요. 이미 말했지만, 넷스케이프는 꽤 오래전부터 이미 소스코드를 공개하는 것에 대해 논의를 해 왔습니다. 에릭의 논문에 대해 들어보셨을 겁니다. 

(Eric Raymond) 나는 1997년초의 리눅스 회의에 처음 그 논문을 제출했습니다. 그리고 오라일리 어쏘시에이츠의 팀 오라일리도 그 얘기를 들었습니다. 나는 그것이 매우 흥미있다고 생각했습니다. 그리고 그해후반 그러니까 97년 가을쯤이었나, 첫번쨰 펄 컨퍼런스에서 그것에 대해 강연해달라고 부탁했습니다. 그리고 어떤 일이 벌어졌냐면, 내가 들은 바에 따르면 , 그일이 있을 당시 나는 전혀 몰랐던 일이엇지만, 넷스케이프의 어떤 사람들이 펄 컨퍼런스에서 그 강연을 들었고, 그 아이디어를 전격 수용해 모종의 일을 벌이기로 했다고 합니다. 

(Frank Hecker) 내 글의 역할은 본질적으로 넷스케이프 내부에서 왜 넷스케이프가 소스코드를 공개했는지에 대한 사업적인 사례를 만드는 것이었습니다. 그 페이퍼는 “넷스케이프 제품으로서의 넷스케이프 소스코드”로 불려졌습니다. 이상한 제목인데, 이 제목이 의미하는 것은 내 생각에는 우리가 소스코드를 생각할 때, 단지 우리의 생산물(product)을 만들기 위한 어떤 것이 아니라 그 자체로 권리를 가진 생산물로 생각할 필요가 있다는 것입니다. 고객들이 사용하게 될, 그리고 다른 사람들이 사용하게 될 어떤것. 나는 그떄 우리가 우리 제품에 대한 소스코드를 공개한다면 비즈니스 모델은 어떠해야 할 것인가를 보았습니다. 그것을 라이센스하는 것은 어떨까? 이런 환경에서 어떻게 제품(product)을 팔 수 있을까? 그때 나는 경쟁, 특히 마이크로소프트와의 경쟁을 보았습니다. 우리가 소스코드를 공개하면 그들은 어떻게 나올까? 우리에 반하는 목적으로 소스코드를 사용할수 있는 방법이 있을까? 나는 에릭의 페이퍼가 분산개발이 어떻게 작동하는지, 회사가 단지 피고용자들만이 아니라 어떻게 인터넷을 통해서 다른사람들과 함께 작업할 수있는지를 보여주는 하나의 예로써 사용했습니다. 그것이 내가 에릭의 페이퍼를 내 페이퍼에 참고문헌으로 포함시킨 이유입니다.  내 페이퍼가 한번 돌려지면 내 페이퍼를 읽은 사람들은 자연스럽게 에릭의 페이퍼에 대한 참조를 찾을 것이고 그것 역시 읽게 됩니다. 

[넷스케이프에서 일어난 사건에 누가 관계됐습니까?]

(Eric Raymond) 먼저 실제적으로 결정을 내린 사람은 짐 박스데일(Jim Barksdale)입니다. 그리고 나중에 중요한 일이 되더군요. 우리의 큰 승리, 큰 점수, 우리를 주류사회에 널리 알려지게 하고 투자자에게 신뢰를 준 것은 기술자 집단의 상향식 에반젤리즘이 아니라 이 방법의 잠재력을 알아보고 휘하의 모든 사람에게 비전을 주고자 한 상층 수뇌부의 전략에 따른 것이었습니다. 

(Frank Hecker) 집필 작업을 끝마치고 나는 맨 처음 넷스케이프의 공동창업자이고 당시 고위간부였던 마크 엔드리센에게 사본을 주었습니다. 그리고나서 마크는 넷스케이프 간부 몇몇에게 사본을 나눠주었습니다. 짐 박스데일을 포함해서요. 나는 짐과 다른 고위간부들이 실제로 결정을 내린 것이 정확히 언제였는지는 모르겠습니다만, 1월초였던 것 같습니다. 넷스케이프는 실제로 1월 22일까지 소스코드를 공개할것이며 그 무렵에 커뮤니케이터를 무상으로 제공할 것이라고 발표했습니다. 넷스케이프가 소스코드를 공개하기로 결정했을때, 사람들은 공지문을 보고는 벌떡 일어나 이렇게 말했습니다. “이봐, 소스코드를 공개하고 회사 외부의 사람들과 함께 개발하기로 결정한 데에는 무언가 다른 꿍꿍이가 있을거야.” 어쨋든 넷스케이프의 결정은 자유 소프트웨어, 지금은 오픈소스라고 알려진 개념에 대해 공개적인 주목을 불러일으켰고, 그 당시 오픈소스 소프트웨어의 가장 탁월한 사례 중 하나였던 리눅스 운영체제에 대해서도 많은 관심을 불러모았습니다. 

(Larry Augustin. Ph. D) 캘리포니아 마운틴뷰, 여기가 우리의 첫번째 사무실입니다. 우리는 1995년초에 이곳으로 이주해왔습니다. 4,000평방 피트입니다. 우리 사무실로 다른 회사를 가져오고 밖으로 옮기는 것은 정말 믿을 수 없는 변화입니다. 지금 이곳에서 정말로 중요한 것은 여기가 “오픈소스”라는 단어가 발명된 사무실이라는 겁니다. 

(Eric Raymond) 이 사실로 걸어들어가 “프리소프트웨어”라고 말해보십시오. 좋아요. 당신이 운이 좋다면 이런대답을 들을 겁니다. “흠흠, 프리소프트웨어라니, 분명 싸구려에, 조잡하고, 쓸모없는 것일게야” 아 만일 운이 나쁘다면 자유소프트웨어 재단의 지적재산권에 대한 도매금 공세에 관한 이야기도 나오겠죠. 당신이 그것의 도덕적 의미가 어떻다고 생각하던간에, 그것은 형편없는 마케팅이고, 경영자들이 듣고 싶어하는 말이 아닙니다. 

(Larry Augustin. Ph. D)  그래서 에릭 레이먼드는 문제가 잇다는 걸 알고 있었습니다. 우리는 이것을 자유소프트웨어라고 불러왔습니다. 그러나 사람들은 “자유”라는 말에서 “공짜”를 생각합니다. 돈을 벌 수도 없고 팔 수도 없는 것으로 생각했습니다. 전적으로 잘못된 생각이죠. 우리는 소프트웨어가 공개되어 있고, 소스코드를 사용할 수 있다는 개념으로 넘어서고자 했습니다. 매우 중요한 부분이죠. 마운틴뷰의 LA Linux 사무실에서 에릭과 나, 포레스트 재단에서 온 Christine Peterson 등도 참여하여 모임을 가졌습니다. 

(Eric Raymond) Christine Peterson 은 전화기 근처에 있엇어요. Jon “Mad dog” Hall 도 거기 있었군요. 그리고 나중에 SuSE에서 일하게 될 Todd Anderson도 잠시 거기 있었습니다. 아 그는 그떄 VA직원이었어요. 

(Larry Augustin. Ph. D) 음 우리는 오픈소스라는 개념에 이르렀죠. 사실 우리는 리누스에게 전화했고, 리누스에게 마음에 드느냐고 물었습니다. 관심을 보였어요. 그는 그것을 좋아했습니다. 결국 우리는 “자유 소프트웨어”를 대체할 만한 것에 이른 겁니다. 그것이 오픈소스의 시작입니다. 

[당신은 어떻게 “오픈소스”라는 단어를 선택했습니까?]

(Larry Augustin. Ph. D) 아시다시피 나는 크리스틴 피터슨이 처음 그 개념을 들고나온사람이라고 생각합니다. 우리는 다시 소스코드가 개방된 상태로 존재하는 개념을 원했습니다. 별다른 대안이 없었습니다. 

(Richard Stallman) 처음 세명의 발표자가 오픈소스 운동에 대해 발언했기 떄문에 나는 자유 소프트웨어운동에 대해 말해야겠죠. 오픈소스 운동은 실제적인 이점에 초점을 맞춥니다. 서로 협동하고 향상된 소프트웨어를 서로 교환하는 사용자들의 공동체를 가질 수 있음을 말합니다. 나는 그들이 그와 관련하여 만들어 놓은 관점들에 100% 동의합니다. 내 관점이 다르다고 말하는 이유는 내가 오픈소스 운동이 아니라 자유소프트웨어 운동에 몸담고 있지만 더 중요한 무언가가 걸려있다고 믿기 때문입니다. 타인과 협력할 수 있는 자유, 공동체를 가질 수 있는 자유는 우리 삶의 질적인 측면에서 중요합니다. 우리가 살아가야 할 사회를 좋게 만드는 것은 중요합니다. 그리고 그것은 나의 관점에서, 강력하고 믿을만한 소프트웨어보다 훨씬 더 중요합니다. 

(Bruce Perens) 그러나 자유소프트웨어 진영의 어떤 사람들은 상업화되는 것에 대해 약간의 공포를 가지고 있는 것 같습니다. 그리고, 아 물론 잘 아시겠지만, 혁명은 (작은) 성공때문에 늦어집니다. 나는 상업화가 매우 중요하다고 생각합니다. 우리는 이 소프트웨어를 널리 알리고 싶어하고, 나는 자유소프트웨어의 변치않는 그 남자 리처드 스톨먼과 일반적인 원칙 위에서 함께 작업했고 철학적으로 어떤 견해 차이가 있다고는 생각하지 않습니다. 오픈소스 정의의 저자인 저와 조직으로써의 자유소프트웨어의 창시자인 그와, 한가지 예외는 리처드는 모든 소프트웨어가 자유로워야 한다고 생각합니다. 나는 자유 소프트웨어와 그렇지 않은 것이 공존할 수 있다고 생각합니다. 그것이 우리가 가진 차이의 전부입니다. 

(Eric Raymond) 아 우리는 우리가 필요로 했던 정의에 대해 일찍 결정을 내렸습니다. 우리는 “오픈소스”를 정의하기 위한 일종의 메타 라이센스가 필요했습니다. 그리고 우리는 “The Open Source Definition”이라고 알려진 문서에 이르렀습니다. 그것은 브루스 페렌스가 원본을 작성한 데비안 자유소프트웨어 가이드라인에서 따왓습니다. 

(Bruce Perens) 나는 데비안 개발자들과 한달에 걸쳐 토론을 한 뒤 그것의 원본 초안을 썼습니다. 데비안은 리눅스 배포판이고, 그들의 프로젝트 정책을 만들었습니다. 그리고 에릭과 나는 “오픈소스 정의”에 따라 데비안을 위해 쓴 것에 새로운 이름을 붙이기로 결정했습니다. 오픈소스에 대해 말하자면 오픈소스는 오픈소스 정의에 따라 당신에게 9가지 권리를 부여합니다. 

Right No.1 : Free Redistribution 
첫번째는 자유롭게 재배포할 수 있는 권리입니다.
이것은 가격에 있어서의 공짜가 아니라 해방(liberty)을 의미합니다. 음, 당신은 당신의 소프트웨어를 다른 사람들에게 자유롭게 재배포할 수 있어야 합니다. 부수적으로는 공짜일 수도 있습니다. 당신은 재배포에 요금을 부과하거나 하지 않을 수 있습니다. 소스코드는 반드시 뒤따라야합니다. 

Right No.2 : Source Code Available 
그래야 다른사람이 프로그램을 유지관리할 수있습니다. 예를 사람들이 PC에서 Mac으로 간다면 그들은 소프트웨어를 바꿀 수 있습니다.

Right No.3 : Derived Works Permitted
파생 작업이 가능해야 합니다. 만일 어떤 사람이 당신의 프로그램을 개선하려 한다면, 그들은 그 결과물을 재배포할 수 있어야합니다. 저자의 소스코드를 통합하는 것에 대한 조항이 있습니다. 

Right No.4 : Integrity of the Author’s Source Code
저자의 소스코드를 통합하는 것에 대한 조항이 있습니다. 그에 따르면, 저자는 원저자로써의 명예를 유지할 수있고 당신이 수정을 가한다면, 프로그램의 이름을 수정하거나 당신이 수정한 내역을 명확하게 밝혀서 원저자에게 영향이 없도록 해야 합니다. 

Right No.5 : No Discrimination Against Persons or Groups
사람과 단체는 차별해서는 안됩니다. 내가 자주 드는 예가 있습니다.  당신은 낙태시술자에게나 반 낙태주의자들에게 이 소프트웨어를 사용하는 것을 제한할 수 없습니다.

Right No.6 : No Discrimination Against Fields of Endeavor
분야나 목적에 대해 차별해서도 안됩니다. 이것은 소프트웨어가 학교에서 뿐만 아니라 사업 분야에서도 사용가능해야 함을 의미합니다. 

Right No.7 : Distribution of License
라이센스는 배포가능해야 합니다. 다른말로, 나는 그 라이센스를 다른사람에게 줄 수 있어야하고 똑같이 그 다른사람이 제 3자에게 그것을 줄 떄에도, 같은 라이센스가 적용되어야합니다. 라이센스는 어떤 제품에 특정할 수 없습니다. 

Right No.8 : License Must Not be Specific to a Product 
다른말로 하면, 내가 레드햇 시스템에서 내소프트웨어를 배포한다면 SuSE나 데비안 시스템에서는 배포할 수 없다고 말하는 것은 가능하지 않습니다. 

Right No.9 : License Must Not Contaminate Other Software
라이센스는 다른 소프트웨어를 오염시킬 수 없다. 그래서 내가 만일 이것을 다른 프로그램과 함께 CD로 배포하면 다른 프로그램 역시 자유로워야 한다고 말할 수 없습니다. 그렇지 않다면 당신은 내 소프트웨어를 배포할 수 없습니다. 그리고 오픈소스 정의의 남은 부분은 허용되는 라이센스들의 목록입니다. 우리는 GPL에서 시작했는데, GPL이 BSD 라이센스 중의 오픈소스 정의에 예로 여러군데 사용되고 있고, BSD 시스템은 리눅스보다 먼저 존재했기 떄문입니다. 

Linux and Open Source pick up momentum.

(Eric Raymond) 내 생각에 중요한 축이 된 다음 순간은 데이텁이스 제공자들이 태도를 바꿔 내가 예상한 것보다 3개월 일찍 실제로 7월말/8월초에 오라클과 사이베이스, 그리고 다른 중요한 데이터베이스 제공자들이 리눅스로 포팅하기 시작한 것입니다. 

[그게 왜 중요했죠?]

왜냐하면 오픈소스 이야기가 신빙성있게 들리려면, 특히 리눅스 이야기가 신빙성있게 들리려면, 각각의 소프트웨어 회사들이 그들의 어플리케이션을 이쪽 플랫폼을 지원하도록 포팅할 것을 약속해야 한다는 것입니다. 우리는 사실 오픈소스 캠페인을 발표한 후와 데이터베이스 업체에서 실제로 지원을 발표하는 사이의 기간이 우리의 약점이 드러나는 기간이 되지 않을까 하고 실제로 조금 걱정을 했었죠. 마이크로소프트와 다른 독점 소프트웨어 회사들의 적대적인 행위가 있었습니다. 그것은 우리를 침몰시키기 위한 심각한 마케팅상의 공격이었습니다. 그러나 거대 데이터베이스 벤더가 태도를 바꿔 독립 소프트웨어 제공자(ISV)들을 위한 길을 열었을때 눈위에서 공굴리기가 시작되었습니다. 

1998 : Version 2,110 of Linux has 1.5 million lines of code and 7.5 million users
(Larry Augustin. Ph. D) 매 6개월마다 나는 벤처 캐피탈의 투자가한테로 가서 그들에게 그 사이 리눅스를 채택한 더 많은 사람들의 숫자와 고객 목록을 보여주곤 합니다. 우리의 고객몰록은 점점 더 엄청나게 변해 갔었죠. 시스코 같은 고객들이 나타나는 겁니다. 그리고 당신이 아는 닷컴회사들이 우리의 고객목록에 나타나기 시작합니다. 뒤를 이어 벤처캐피탈리스트들이 당신도 알다시피, 계속 바라보기만 합니다.  그들은 “우리는 그렇게까지는 할 수 없어” 라고 말합니다. 마침내, 리누스가 포춘지의 표지를 장식했습니다. 오픈소스에 뭔가 일어나고 있었습니다. 그때는, 벤처 캐피탈리스트도 그것을 무시할 수 없었습니다. 그들은 도처에서 신물나게 리눅스에 관해 들었습니다. 그리고 나에 대해서도 질렸죠. 그 당시에는 거의 매주 그들에게 사업 계획서를 보여주었으니까요. 그래서 그들은 투자할 시기가 되었다고 결정했습니다. 

(Bruce Perens) 그때에 내가 인터넷에서 전세계에 오픈소스를 공표하는 사건이 있었습니다. 나는 오픈소스 이니셔티브(OSI)를 출범시키기 위해 많은 초기 행정업무들을 했었죠. 그리곤 6개월쯤 지나자 뉴스에서 오픈소스라는 단어를 밥먹듯이 접하게 되었고 엄청 놀랐죠. 1년후 쯤에는 마이크로소프트가 일부 소스코드를 공개하는 것에 대해 언급했었죠. 일부 언론에서 스티브 발머에게 소스를 공개할 계획이 있느냐고 묻자 스티브 발머가 대답했다. “오픈소스는 소스코드를 공개하는 것 이상의 의미가 있습니다.” 나는 그가 내 문서를 읽고 이해한 후 지금 언론에 얘기하고 있다는 것을 깨달았습니다. 당신이 언터넷상의 어떤 사람, 직업과는 무관하게 이런 일을 하는 사람인데, 당신이 어떤 선언문을 작성하고 그 선언문이 전세계에 확산되고 1년후에 마이크로소프트의 부사장이 거기에 관해서 언급한다면 마치 약을 먹는 느낌일거에요. 안그래요? 그러나 그 일이 진짜로 일어난거에요. 

SVLUG
BALUG
LALUG
Linux Users Groups

(Linus Torvalds) 지역 사용자 그룹은 사회적 네트워크를 건설하는 것, 특히 사람들 간의 친분을 중시하는것 이상이 되려는 경향이 있습니다. 또한 상업적인 지원 네트워크에 지불할 능력을 갖지 못한 사람을 지원하는 네트워크로서 활동합니다. 그래서 그들이 이 지역에서 하려고 하는 한가지는 예를 들면, 그런 것을 만드는 것입니다. 한달에 한번 정도 그들은 자신들의 기계에 리눅스를 설치하는 데 어려움을 겪는 사람들을 위해 설치 축제를 갖습니다. 뭔가 설치에 문제가 있거나 아니면 아미 리눅스를 설치해 봤지만 그들의 기계의 네트웍을 뭔가 특정한 방법으로 설정하기를 원하거나 할 때 그들의 기게를 사용자 그룹 모임에 직접 가져올 수 있게 하는 거죠. 그리고 이전에 동일한 문제를 본 적이 있어서 기꺼이 다른 사람을 돕고자 하는 사람이 있습니다. 

(man1) 물론 모든 일이 순조롭게 풀리는 것은 아닙니다. 저 자신도 문제를 겪어서 직접 경험해 봤어요. 모든 종류의 도사들이 많이 모이는 이 설치 축제에 참가했습니다. 아무래도 이 방법이 더 낫지 않을까 생각했죠. 

(man2) 메일을 보내거나 인터넷 뉴스그룹에 포스팅한 후 수일동안 대답을 기다리는 대신 이곳에 참가형 당신의 문제에 대해 알고 있고 도울 수 있는 다른사람을 발견하는 것이 더쉬울 것이라고 생각했죠. 그래서 몇시간 안에 당신의 컴퓨터에 성공적으로 설치를 마치는 겁니다. 

(man3) 처음에는 내 큰 랩탑에 설치하기를 원했습니다. 도움이 될만한 자료를 찾아 인터넷을 뒤졌습니다만, 음 나는 여기 이자리에 있습니다. 바로 이 자리에서 이 조그만 녀석, 도시바 리브레또에 리눅스를 집어넣기 위해서입니다. 아주 쉬운일은 아니에요. 아주 이상한 하드웨어조각들이 많이 붙어 있거든요. 주변에 의자가 있습니까? 

(Linus Torvalds) 나는 사법부의 (반독점) 소송이 사람들에게 적어도 마이크로소프트가 아닌 대안을 찾아야 할 필요가 있음을 인식시켰다고 생각합니다. 이젠 마이크로소프트는 미국의 꿈도 아니라는것도요. 당신이 분명하게 알고 있는 것과 같은 그런 변화된 인식이 사람들이 아직도 마이크로소프트를 당연하게 여기고 여전히 마이크로소프트 제품을 구입하겠지만 조금씩 인식이 달라지고 있습니다. 

(Eric Raymond) 마이크로소프트는 리눅스를 방어용으로 사용합니다. 그들은 리눅스가 언제든 본질적으로 자신들이 현재 점하고 있는 위치를 쉽게 끌어내릴 수 있기 떄문에 자신들일 독점이 아니라는 주장의 근거로 사용합니다. 이것은 눈가리고 아옹하는 매우 영리한 논증입니다. 왜냐하면 과거 그들의 깡패짓과 다양한 반독점 행위에 대해 부과된 벌금을 내지 않기 위해 하는 행동이기 때문입니다. 그들의 영리함을 입증하는 것으로 어떤 경우에는 판사가 그런 주장에 속지 않았죠. 

Hackers Unitel Windows Refund Day Protest February 15, 1999

(Nick Moffitt) 보통, 리눅스 커뮤니티의 우리들은 마이크로소프트가 이슈가 되는 것을 걱정한 반면 98년 12월에 관한 슬래시닷 기사가 있었습니다. Matt 라는 친구가 라면을 먹다가 호주의 한 신사가 자신의 컴퓨터에 딸려오는 쓸데없는 윈도우즈의 카피에 대해 환불을 받았다는 것을 지적했습니다. 그래서 그는 2월 19일을 윈도우즈의 환불의 날로 선언했습니다. 그는 사람들에게 컴퓨터 제조업체로 달려가도록 권했습니다. 윈도우즈 최종사용자 라이센스 동의서에 명시되어 있듯이, 그들의 사용하지 않는 윈도우즈 카피를 반품하고 환불받도록, 라이센스 그 자체를 기억하는 것이 중요합니다. 라이센스에는//////// (~ 1:00:04)





