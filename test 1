오픈소스의 소개

장점)
06 일반적으로 오픈소스 소프트웨어에 대한 코드를 자유롭게 열람하거나 사용, 복사, 수정, 개작 및 재 배포의 권한("자유", Freedom)을 부여 받음
20 오픈소스는 IT 업계의 대세 (78%의 회사가 오픈소스를 사용 중, 64%의 회사가 오픈소스 프로젝트 참여 중) Source: 2015 Future of Open Source Survey Results 
21 오픈소스 블럭으로 원하는 것을 쉽게 구현 (50% 이상의 엔지니어가 오픈소스 기반으로 업무, 66% 이상이 솔루션 도입 시 오픈소스 우선 고려) Source: 2015 Future of Open Source Survey Results 
22 오픈소스는 기업의 비즈니스를 돕고 있는 중 (65%의 기업이 오픈소스를 통해 경쟁 우위 확보, 75%의 기업이 오픈소스를 통해 매출 증대) Source: 2015 Future of Open Source Survey Results 
23 증가하는 오픈소스 스타트업에 대한 투자 $398M $669M $920M $1.3B 2011 2012 2013 2014 Source: 2015 Future of Open Source Survey Results 



활용사례)
04 오픈소스 기반 서비스 기업 사례 "S2 Graph
04 아파치 재단의 오픈소스 인큐베이터 프로젝트에 채택"
04 MongoDB, OpenSSL, WebRTC 등 오픈소스를 활용하여 주요 서비스 개발
04 세계 최대의 오픈소스 기업
04 900여 개 프로젝트로 2,000만 라인 소스 공개
04 Android • Chromium • GWT 등 • 200여 개 오픈소스 프로젝트 제공
04 1,000만 라인 소스 공개(2014/06 현재) • React • Hbase • WebScaleSQL 등 • BigData, 개발/빌드, 데이터 저장소 등의 분야에서 수 십여 개 프로젝트 제공 • Lipstick • Nebula • RxJS 등 Google, Facebook 만으로도 Linux 커널 두 개 분량 
06 Linux 운영체제가 대표적인 오픈소스 사례로, 누구나 무료로 이용할 수 있으며 공개 된 코드를 기반으로 프로그램을 마음대로 변형 할 수 있음
18 확대 - 이제는 거의 모든 분야에 사용 됨 - 운영체제 웹서버/미들웨어 데이터베이스 기타..
19 오픈소스의 확대 – 프로젝트와 참여의 비약적 증가 BLACK DUCK KNOWLEDGEBASE 100B lines of code 10M people Source: 2014 Future of Open Source Survey Results



개념)
06 특정 라이선스에 따라 소프트웨어의 소스 코드가 공개되어 있음
06 오픈소스는 소프트웨어뿐 아니라 하드웨어에도 적용 됨
06 오픈소스란? [위키피디아] 오픈 소스(open source)는 소프트웨어 혹은 하드웨어의 제작자의 권리를 지키면서 소스 코드를 누구나 열람할 수 있도록 한 소프트웨어 혹은 오픈 소스 라이선스에 준하는 모든 통칭을 일컫는다. 어원에 대 해서는 History of the OSI 자료에 따르면, 1998년 2월 3일에 넷스케이프 브라우저의 원시 코드에 대해 어떠한 형태로 공개할까 하는 전략회의에서 붙여진 새로운 용어라고 설명되어 있다. 
07 1. 자유로운 재배포 - 라이센스는 여러 다른 소스들의 프로그램을 포함하고 있는 집합적 소프트웨어 배포판의 컴포넌트로서 소프 트웨어의 판매나 기부에 대해서 그 어떤 누구도 배제되어서는 안 된다. 라이선스는 로열티 또는 판매 비용이 없다.
07 2. 소스 코드 - 프로그램에는 소스 코드가 포함되어 있어야 하며 소스 코드 형태와 컴파일이 완료된 형태로 배포될 수 있어 야 한다. 특정 형태의 제품이 소스 코드로 배포되지 않으면 소스 코드를 구매해야 하며 인터넷을 통해 무료로 다운로드 해야 한다. 소스 코드는 프로그래머가 프로그램을 변경하기에 좋은 형식이다. 알아보기 힘든 소스 코드는 사용될 수 없다. 프리프로세서(preprocessor)의 아웃풋 또는 트랜슬레이터 같은 중간 형태도 사용될 수 없다.
07 3. 파생 작업(Derived work) - 라이선스는 변경과 파생 작업이 가능해야 한다. 원래의 소프트웨어 라이선스와 같은 조건 하에 배포되어야 한다.
07 4. 소스 코드의 무결성 - 구현 시 프로그램을 변경할 목적으로 소스 코드와 함께 "패치 파일"의 배포를 허용하는 경우에만, 라이선스 는 소스 코드가 변경된 형태로 배포되는 것을 제한한다. 라이선스는 변경된 소스 코드에서 구현된 소프트웨 어의 배포를 허용해야 한다. 라이선스는 파생 작업(derived work)을 통해 다른 이름 또는 다른 버전을 만들어 야 한다.
07 5. 개인 또는 그룹의 평등 - 라이선스는 어떤 개인이나 그룹에 차별을 두어서는 안 된다.
08 6. 분야에 대한 평등 - 라이선스는 특정 분야에서 프로그램을 사용하는 것에 대해 제한을 두어서는 안된다. 예를 들어, 프로그램 은 비즈니스 또는 유전공학 연구 분야에서 사용될 수 있다.
08 7. 라이선스 배포 - 프로그램에 대한 권한은 프로그램이 재배포 된 모든 곳에 적용되어야 한다. 추가 라이선스를 발행할 필요 가 없다.
08 8. 제품 스펙에 따른 라이선스 - 프로그램에 대한 권한은 특정 소프트웨어 배포판의 프로그램의 일부에 해당하지 않는다. 프로그램이 그 배 포판에서 추출되었고, 그 프로그램의 라이선스의 조건 하에 사용 및 배포된다면 재배포된 프로그램을 사용 하는 모든 당사자들은 원래의 소프트웨어 배포판에서 허용된 것과 같은 권한을 갖게 된다.
08 9. 라이선스는 다른 소프트웨어를 제한하지 않는다 - 라이선스는 라이선스를 받은 소프트웨어와 함께 배포된 다른 소프트웨어에 제약 사항을 두어서는 안된다. 예를 들어, 같은 미디어에 배포된 모든 다른 프로그램들이 오픈 소스 소프트웨어가 될 필요는 없다.
08 10. 라이선스는 기술 중립적이어야 한다 - 라이선스는 기술이나 인터페이스 스타일을 한정해서는 안된다.
08 *주석 OSI(Open Source Initiative)에서 말하는 오픈소스 조건 Source: https://opensource.org/osd 


규정)
06 사용 시, 원 제작자의 권리를 지키는 것도 중요 함


현황) 재단과 성공한 오픈소스 프로젝트
26 Apache Software Foundation(ASF)  ASF 이전에는 “The Apache Group”  정형화되고 법률적인 지원을 받기 위해 설립(1999)  초기에는 21명의 멤버, httpd 웹서버 프로젝트 하나로 시작  Apache Jakarta 프로젝트를 통해 Tomcat, Struts, Ant, Maven 등 각종 Java 기반 오픈소스 시작  운영에 필요한 서버와 서비스는 기부 받음 왜 재단이 만들어질까?  프로젝트를 할 수 있는 기본적 인프라 제공  컨퍼런스, 이벤트, 기부금 등 세금 관련된 일들 처리  라이선스, 특허, 표준 약관, 상표 관리 등 법률적 문제 대응  기술 중심 워크그룹 운영 Apache Software Foundation (오픈소스 재단) 
27 Apache Software Foundation  가장 대표적인 오픈소스 재단. 350개 이상의 프로젝트 관리 Software Freedom Conservancy  BusyBox, Git, Samba, Wine 등 33개 프로젝트 관리  GPL 의무화를 위한 GPL Compliance Project를 추진 Linux Foundation  Linux Kernel 관리. 최근 SDx, IoT, Embed, Cloud 등의 다양한 이머징 기술 협력 Eclipse Foundation  이클립스 개발툴을 비롯한 배포, 관리 오픈소스 관리  BI(Business Inteligence), IoT 등에 관한 200여 개 프로젝트 지원 주요 오픈소스 재단 
28 Cloud Foundry Foundation  클라우드 구축에 필요한 인프라 소프트웨어들을 관리  EMC, HP, IBM, 인텔, SAP 등의 벤더가 공동 참여 Free Software Foundation  리처드 스톨만이 창립했으며, 소프트웨어의 자유로운 사용에 초점을 맞추고 있음  무료 운영 시스템 구현에 목표를 둔 GNU 프로젝트만 관리 Open Source Initiative  역시 특정 프로젝트가 아닌 '오픈소스 소프트웨어' 운동을 지원 Openstack Foundation  오픈스택 클라우드(Private Cloud) 운영 시스템 프로젝트 주요 오픈소스 재단 
29 XENIVI  차량용 인포테인먼트 오픈소스 플랫폼 채택을 목표로한 단체  160개 회원사(현대, BMW, 혼다 등 완성차 업체 포함) 가입 OSHERA  EHR(Electronic Health Record) 등 의료용 소프트웨어를 오픈소스 기반으로 제공하기 위 한 단체 OpenMAMA  미들웨어나 벤더 중립적인 메시징 API를 구현하기 위한 단체 Allseen Alliance  퀄컴과 Linux Foundation이 사물인터넷용 오픈 플랫폼과 표준을 제정하기 위한 단체 Polarsys  에어버스 등 항공사와 관련 업체, 그리고 Eclipse Foundation이 안전과 관련된 산업 장비 에 대한 오픈소스 기반 개발을 위해 만든 단체 Android Community  주요 모바일 운영체제인 Google Android 운영체제를 지원하기 위한 단체 산업별 오픈소스 커뮤니티 – 오픈소스 기반의 2차 혁명 
30 Linux  GNU에서 관리하고 있는 오픈소스 운영체제  X86 기반에서 벗어나 임베디드 기기, 모바일 등 다양한 하드웨어에 포팅  데스크탑이나 웹서버 위주에서 현재는 클라우드, 빅데이터 등의 분야에서 사실상의 표준 운영체제로 자리 잡음  모든 안드로이드 스마트폰 단말(한국 90.1%)  전세계 슈퍼 컴퓨터의 93.8%(2013년 11월 기준)  Google, Twitter, Facebook, Amazon 등  개발자 8,000명, 회사 800개, 1,500만줄의 코드  3~6개월 주기의 커널 업그레이드 성공한 오픈소스 프로젝트 Source: : Worldwide Linux Server Operation System Environment by Vendors, 2006-2010, March IDC 2011
31 MySQL(MariaDB)  전세계적으로 가장 많이 사용되고 있는 오픈소스 데이터베이스의 하나  페이스북 등 거의 대부분의 웹 서비스 업체에서 운영 데이터 저장용으로 사용  현재는 클러스터링, 분산(샤딩), 복제 및 백업 등 엔터프라이즈 환경에서 필요로 하 는 고급 기능까지 지원  오라클이 인수(10억 달러) 후 “오픈코어 전략” 표방  오픈소스 결과물의 확장 기능이나 엔터프라이즈 기능 공개하지 않고 있음  이에 반발한 마이클 몬티가 막내 딸 이름을 붙여 MariaDB 시작 Apache HTTP Server  Apache 재단의 대표 프로젝트로 전 세계적으로 가장 많이 사용(46% 점유율)하는 웹서버  NCSA의 HTTPd 코드를 기반으로 Linux에서 사용할 수 있도록 웹 서버 코드를 재 작성  커뮤니티 그룹과 미 델라웨어사와 합작하여 Apache Software Foundation 설립 (1999) 성공한 오픈소스 프로젝트 
32 Hadoop  빅데이터 분야의 대표적인 오픈소스 프로젝트  거의 모든 빅데이터 업체들이 사용하고 있는 기반 플랫폼 - (예) Hortonworks, Cloudera, MapR, IBM, Oracle  빅데이터 관련 소프트웨어들의 생태계 역할 - (예) Pig, Hive, HBase  모바일, 사물인터넷에 기반한 급속한 데이터 증가에 따라 더욱 중요도 증가 Openstack  클라우드 업체인 Rackspace와 NASA가 협력하여 만든 오픈소스 클라우드 운영 시스템  클라우드 시스템 구축에 필요한 컴퓨팅, 네트워크, 스토리지 자원에 대한 가상화 및 운영 관리는 물론이고 보안, 웍플로우 등 거의 모든 요구사항 지원하는 사실상의 표준  클라우드 업체는 물론 가상화, 하드웨어, 네트워크, 스토리지 등 다양한 벤더들이 참여 중 MongoDB  기존 RDB와는 다른 NoSQL 기반의 데이터베이스  빅데이터 시대의 도래와 함께 비정형 데이터를 대량으로 처리할 수 있는 장점 부각  RDB와 유사한 인터페이스, 폭 넓은 사용자 저변, 높은 성능으로 NoSQL 분야에서 사실상의 업계 표준 성공한 오픈소스 프로젝트 
33 Pentaho  BI(Business Intelligence) 및 데이터 통합(ETL 등) 분야의 오픈소스 강자  Hadoop과 NoSQL 지원을 통해 빅데이터 시장 진입  자본 유치와 고객 확보에도 성공 PostgreSQL(Enterprise DB)  MySQL(MariaDB)과 함께 주요한 오픈소스 RDB 프로젝트의 하나  Enterprise DB를 통해 상용화된 버전 제공  Oracle DB와 뛰어난 호환성 Wordpress  오픈소스 블로그 플랫폼이자 WCM(Web Contents Management) 플랫폼  전 세계 웹사이트의 22%, WCM 시장의 60% 이상 점유 WSO2  Apache 라이선스 기반으로 한 오픈소스 미들웨어 스위트  ESB, BPM, BRM, API Manager, CEP 등의 컴포넌트 성공한 오픈소스 프로젝트 


필요성)
35 특정 벤더의 운영체제와 브라우저에 대한 높은 종속성으로 인한 국가적인 보안 위기 초래 종속성을 낮추기 위한 방안으로 자유로운 사용과 수정이 가능한 오픈소스 부각 실제 다양한 국가와 기관에서 오픈소스를 사용한 성공 사례  독일(뮌헨 시청 Ubuntu Linux 도입), 중국(캐노니컬과 공동으로 PC 용 Ubuntu 개발) 개방형 기술의 필요성 – 우리나라 IT 현실 
36 대내외 비즈니스 환경의 변화  빠르게 변하는 비즈니스 주변 환경  "어떤 IT 기술" 보다는 "필요한 비즈니스"를 "빠르게" 하는 것이 중요한 시대  Mobile, SNS 혁명  대량 데이터 분석의 필요성 왜 오픈소스인가? 2억 개의 이메일이 발송 10만개의 트윗 메시지 293,000개의 상태 업데이트 20G 이상의 로그 데이터 방금 1분 동안 !! 
37 비즈니스 환경의 변화에 맞춘 혁신적 IT 기술의 필요성  Mobile, SNS의 발달로 트래픽 증가  과거에는 주요 기술들을 소수의 IT 벤더에게서 제공 받아야 했음  과거의 IT 기술로 커버하기 힘든 상황  새로운 요구사항을 빠르게 수용할 수 있는 기술의 필요성 왜 오픈소스인가? 
38 빅데이터, 클라우드(가상화) 등 혁신적 신기술  Mobile, SNS에서 발생하는 대용량 데이터를 처리할 수 빅데이터 기술 적용  서비스 수요에 맞추어 빠르게 인프라를 구축할 수 있는 클라우드, 가상화 기술 적용  빅데이터, 클라우드는 현재도 빠르게 발전하고 있는 Emerging Technology  빠른 기술 발전을 수용하면서도 다수의 참여자가 평등하게 사용할 수 있는 기술 기반의 필요성 왜 오픈소스인가? SNS Big Data Mobile Cloud 
39 다수의 참여자 모델  소수의 개발자들에 의해 비밀스럽게 관리되는 상용 소프트웨어보다 다수의 개발자/사용자가 참여하는 오픈소스가 기술 발전 속도가 월등히 빠름  (예) 하드웨어 벤더들이 독점적으로 개발하던 운영체제가 Linux 기반으로 변경 중립적 플랫폼의 필요성  시장 영향력이 큰 플랫폼이 특정 벤더에 종속적이 되는 것을 방지  (예) Allseen, XENIVI, Polarsys  (예) PC 운영체제를 독점한 특정 기업에 의해 응용 소프트웨어 시장도 독과점 발생 혁신적 기술의 발전에 유리  클라우드, 빅데이터, 사물인터넷 등처럼 발전 속도가 빠른 최신 기술에 대한 구현이 용이 - 정 보나 소스에 대한 공유가 자유로움  표준이 같이 발전하는 경우 그것의 구현체로서 오픈소스가 최적의 역할  (예) Openstack, Hadoop 왜 오픈소스인가? 




역사 부문)
10 1960년대 - 하드웨어 판매 중심 - 소프트웨어 공유 문화 소프트웨어 공유 문화
11 1970년대 - 벨 연구소에 의해 Unix 개발 - AT&T를 비롯한 여러 회사, 버클리 등 비영리 단체에서 다양한 버전 개발
11 1980년대 HP/UX, AIX, Solaris 등의 상용 버전 Unix 개발 및 상용화 
12 1976년 - 빌게이츠가 컴퓨터 애호가들에게 보내는 공개 편지 “Open Letter to Hobbyists” - 1976년 친구 폴 앨런과 MITS Altair 8800을 위한 베이식 인터프리터 제조 후 MITS를 통해 판매 - 소프트웨어 저작권에 대한 인지, 시작된 상업용 소프트웨어 시대 - 모든 코드를 비공개 형태로 만들어 버리게 되는 계기 상용 소프트웨어의 등장
13 1984 ~ 1986년 - 리처드 스톨만 - 자유 소프트웨어 운동 주도 - 상용 소프트웨어에 대항한 자유로운 대안을 만들기 위한 의지 - GNU is Not a Unix(GNU) 프로젝트 시작 - Text editor(Emacs), Compiler(gcc), Debugger(gdb), make 개발 - Free Software 운동 시작 후 자유소프트웨어 재단(FSF) 설립 - 1989년 최초의 오픈소스 라이선스 GNU General Public License 배포 자유소프트웨어 운동 
14 14 1991년  리눅스의 탄생  핀란드 헬싱키 대학의 대학원생인, 리누스 토발즈가 취미로 개발한 커널  핀란드 대학 3학년, MINIX를 응용하여 리눅스 커널 개발 후 GNU GPL로 배포 1992년  Linux Desktop GUI 프로젝트, Xfree86 시작 1993년  GNU/Linux 구현체 Debian, Slackware 시작 Linux의 탄생 
15 1998년  넷스케이프 브라우저 코드에 대한 공개 형태를 결정하는 전략회의에서 붙여진 용어  넷스케이스 소스 코드 공개에 자극 받아, 오픈소스를 장려하기 위한 단체인 OSI(Open Source Initiative) 설립 오픈소스라는 이름 
16 2000년대 이후  많은 기업들이 오픈소스를 사용  상용 소프트웨어 벤더에서도 오픈소스를 가져다가 사용하기 시작  특히, 웹 기반 서비스(예: SNS) 업체에서 오픈소스 활용 폭발적 증가  구글, 아마존, 넷플릭스, 인텔, 오라클, IBM 등 오픈소스의 발전 
