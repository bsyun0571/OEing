오픈소스의 소개

장점)
6 일반적으로 오픈소스 소프트웨어에 대한 코드를 자유롭게 열람하거나 사용, 복사, 수정, 개작 및 재 배포의 권한("자유", Freedom)을 부여 받음


활용사례)
4 오픈소스 기반 서비스 기업 사례 "S2 Graph
4 아파치 재단의 오픈소스 인큐베이터 프로젝트에 채택"
4 MongoDB, OpenSSL, WebRTC 등 오픈소스를 활용하여 주요 서비스 개발
4 세계 최대의 오픈소스 기업
4 900여 개 프로젝트로 2,000만 라인 소스 공개
4 Android • Chromium • GWT 등 • 200여 개 오픈소스 프로젝트 제공
4 1,000만 라인 소스 공개(2014/06 현재) • React • Hbase • WebScaleSQL 등 • BigData, 개발/빌드, 데이터 저장소 등의 분야에서 수 십여 개 프로젝트 제공 • Lipstick • Nebula • RxJS 등 Google, Facebook 만으로도 Linux 커널 두 개 분량 
6 Linux 운영체제가 대표적인 오픈소스 사례로, 누구나 무료로 이용할 수 있으며 공개 된 코드를 기반으로 프로그램을 마음대로 변형 할 수 있음


개념)
6 특정 라이선스에 따라 소프트웨어의 소스 코드가 공개되어 있음
6 오픈소스는 소프트웨어뿐 아니라 하드웨어에도 적용 됨
6 오픈소스란? [위키피디아] 오픈 소스(open source)는 소프트웨어 혹은 하드웨어의 제작자의 권리를 지키면서 소스 코드를 누구나 열람할 수 있도록 한 소프트웨어 혹은 오픈 소스 라이선스에 준하는 모든 통칭을 일컫는다. 어원에 대 해서는 History of the OSI 자료에 따르면, 1998년 2월 3일에 넷스케이프 브라우저의 원시 코드에 대해 어떠한 형태로 공개할까 하는 전략회의에서 붙여진 새로운 용어라고 설명되어 있다. 
7 1. 자유로운 재배포 - 라이센스는 여러 다른 소스들의 프로그램을 포함하고 있는 집합적 소프트웨어 배포판의 컴포넌트로서 소프 트웨어의 판매나 기부에 대해서 그 어떤 누구도 배제되어서는 안 된다. 라이선스는 로열티 또는 판매 비용이 없다.
7 2. 소스 코드 - 프로그램에는 소스 코드가 포함되어 있어야 하며 소스 코드 형태와 컴파일이 완료된 형태로 배포될 수 있어 야 한다. 특정 형태의 제품이 소스 코드로 배포되지 않으면 소스 코드를 구매해야 하며 인터넷을 통해 무료로 다운로드 해야 한다. 소스 코드는 프로그래머가 프로그램을 변경하기에 좋은 형식이다. 알아보기 힘든 소스 코드는 사용될 수 없다. 프리프로세서(preprocessor)의 아웃풋 또는 트랜슬레이터 같은 중간 형태도 사용될 수 없다.
7 3. 파생 작업(Derived work) - 라이선스는 변경과 파생 작업이 가능해야 한다. 원래의 소프트웨어 라이선스와 같은 조건 하에 배포되어야 한다.
7 4. 소스 코드의 무결성 - 구현 시 프로그램을 변경할 목적으로 소스 코드와 함께 "패치 파일"의 배포를 허용하는 경우에만, 라이선스 는 소스 코드가 변경된 형태로 배포되는 것을 제한한다. 라이선스는 변경된 소스 코드에서 구현된 소프트웨 어의 배포를 허용해야 한다. 라이선스는 파생 작업(derived work)을 통해 다른 이름 또는 다른 버전을 만들어 야 한다.
7 5. 개인 또는 그룹의 평등 - 라이선스는 어떤 개인이나 그룹에 차별을 두어서는 안 된다.
8 6. 분야에 대한 평등 - 라이선스는 특정 분야에서 프로그램을 사용하는 것에 대해 제한을 두어서는 안된다. 예를 들어, 프로그램 은 비즈니스 또는 유전공학 연구 분야에서 사용될 수 있다.
8 7. 라이선스 배포 - 프로그램에 대한 권한은 프로그램이 재배포 된 모든 곳에 적용되어야 한다. 추가 라이선스를 발행할 필요 가 없다.
8 8. 제품 스펙에 따른 라이선스 - 프로그램에 대한 권한은 특정 소프트웨어 배포판의 프로그램의 일부에 해당하지 않는다. 프로그램이 그 배 포판에서 추출되었고, 그 프로그램의 라이선스의 조건 하에 사용 및 배포된다면 재배포된 프로그램을 사용 하는 모든 당사자들은 원래의 소프트웨어 배포판에서 허용된 것과 같은 권한을 갖게 된다.
8 9. 라이선스는 다른 소프트웨어를 제한하지 않는다 - 라이선스는 라이선스를 받은 소프트웨어와 함께 배포된 다른 소프트웨어에 제약 사항을 두어서는 안된다. 예를 들어, 같은 미디어에 배포된 모든 다른 프로그램들이 오픈 소스 소프트웨어가 될 필요는 없다.
8 10. 라이선스는 기술 중립적이어야 한다 - 라이선스는 기술이나 인터페이스 스타일을 한정해서는 안된다.
8 *주석 OSI(Open Source Initiative)에서 말하는 오픈소스 조건 Source: https://opensource.org/osd 


규정)
6 사용 시, 원 제작자의 권리를 지키는 것도 중요 함

역사 부문)
10 1960년대 - 하드웨어 판매 중심 - 소프트웨어 공유 문화 소프트웨어 공유 문화
11 1970년대 - 벨 연구소에 의해 Unix 개발 - AT&T를 비롯한 여러 회사, 버클리 등 비영리 단체에서 다양한 버전 개발
11 1980년대 HP/UX, AIX, Solaris 등의 상용 버전 Unix 개발 및 상용화 
12 1976년 - 빌게이츠가 컴퓨터 애호가들에게 보내는 공개 편지 “Open Letter to Hobbyists” - 1976년 친구 폴 앨런과 MITS Altair 8800을 위한 베이식 인터프리터 제조 후 MITS를 통해 판매 - 소프트웨어 저작권에 대한 인지, 시작된 상업용 소프트웨어 시대 - 모든 코드를 비공개 형태로 만들어 버리게 되는 계기 상용 소프트웨어의 등장
13 1984 ~ 1986년 - 리처드 스톨만 - 자유 소프트웨어 운동 주도 - 상용 소프트웨어에 대항한 자유로운 대안을 만들기 위한 의지 - GNU is Not a Unix(GNU) 프로젝트 시작 - Text editor(Emacs), Compiler(gcc), Debugger(gdb), make 개발 - Free Software 운동 시작 후 자유소프트웨어 재단(FSF) 설립 - 1989년 최초의 오픈소스 라이선스 GNU General Public License 배포 자유소프트웨어 운동 
14 14 1991년  리눅스의 탄생  핀란드 헬싱키 대학의 대학원생인, 리누스 토발즈가 취미로 개발한 커널  핀란드 대학 3학년, MINIX를 응용하여 리눅스 커널 개발 후 GNU GPL로 배포 1992년  Linux Desktop GUI 프로젝트, Xfree86 시작 1993년  GNU/Linux 구현체 Debian, Slackware 시작 Linux의 탄생 
15 1998년  넷스케이프 브라우저 코드에 대한 공개 형태를 결정하는 전략회의에서 붙여진 용어  넷스케이스 소스 코드 공개에 자극 받아, 오픈소스를 장려하기 위한 단체인 OSI(Open Source Initiative) 설립 오픈소스라는 이름 
16 2000년대 이후  많은 기업들이 오픈소스를 사용  상용 소프트웨어 벤더에서도 오픈소스를 가져다가 사용하기 시작  특히, 웹 기반 서비스(예: SNS) 업체에서 오픈소스 활용 폭발적 증가  구글, 아마존, 넷플릭스, 인텔, 오라클, IBM 등 오픈소스의 발전 
